/*
 * Name: Sim Jin Yi (P17008744 / 9658521)
 * Date: October 22, 2020
 * Description: 310CT - Assignment 2
 */

/* BEGIN: Top-level Goals */
GOALS:
	ACHIEVE clean :UTILITY 10;
	ACHIEVE return :UTILITY 1;
/* END: Top-level Goals */


/* BEGIN: World Model */
FACTS:

	// Robot A (starting (0, 0))
	FACT robotA 0 0;
	FACT robotADirection "right" "up";
	FACT robotAStepsTaken 0;

	// Robot B (starting (7, 0))
	FACT robotB 7 0;
	FACT robotBDirection "left" "up";
	FACT robotBStepsTaken 0;
	
	// List of dusts on the grid
	FACT dust 3 0;
	FACT dust 6 0;
	FACT dust 2 1;
	FACT dust 1 2;
	FACT dust 4 2;
	FACT dust 0 3;
	FACT dust 3 3;
	FACT dust 4 4;
	FACT dust 1 5;
	FACT dust 5 5;
	FACT dust 3 6;

	// List of obstacles on the grid
	FACT obstacle 4 1;

	// Exit coordinate and the boundary of the grid
	FACT exit 7 6;
	FACT MAX_X 7;
	FACT MAX_Y 6;

	// Whether if the all the grids were visited and the dusts were cleaned
	FACT allVisited "false";
	FACT dustCleaned "false";
/* END: World Model */


PLAN:
{
NAME: 
	"Clean the Dusts in the Grid"

DOCUMENTATION:
	"The plan achieves the top-level goal to clean the dusts in the grid,
		- The robots will attempt to clean until either:
			- All the dusts in the grid were cleaned.
			- All the cells in the grid were visited once.
		- Both robot will make a move in each iteration.
		- The checking on the status of the grid as follow will be performed every iteration:
			- Whether if all the dusts in the grid were cleaned.
			- Whether if all the cells in the grid were visited."
	
GOAL:
	ACHIEVE clean;
	
BODY:

	// Perform the initial check on the status of the grid
	PERFORM check;
	RETRIEVE dustCleaned $dustCleaned;
	RETRIEVE allVisited $allVisited;

	WHILE: TEST(&& (== $dustCleaned "false") (== $allVisited "false")) {
		PERFORM robotAClean;
		PERFORM robotBClean;
		
		PERFORM check;
		RETRIEVE dustCleaned $dustCleaned;
		RETRIEVE allVisited $allVisited;
	};

	WHEN: TEST(== $dustCleaned "true") {
		EXECUTE println "Exiting: All dusts cleaned";
	};

	WHEN: TEST(== $allVisited "true") {
		EXECUTE println "Exiting: Scanned every grid";
	};
}

PLAN:
{
NAME:
	"Return"

GOAL:
	ACHIEVE return;

BODY:
	RETRIEVE exit $exitX $exitY;

	RETRIEVE robotA $x $y;
	WHEN: TEST(|| (!= $x $exitX) (!= $y $exitY)) {
		WHILE: TEST(< $x $exitX) {
			PERFORM move "robotA" "right";
			RETRIEVE robotA $x $y;
			EXECUTE println "Robot A: (" $x ", " $y ")";
		};

		WHILE: TEST(> $x $exitX) {
			PERFORM move "robotA" "left";
			RETRIEVE robotA $x $y;
			EXECUTE println "Robot A: (" $x ", " $y ")";
		};

		WHILE: TEST(< $y $exitY) {
			PERFORM move "robotA" "up";
			RETRIEVE robotA $x $y;
			EXECUTE println "Robot A: (" $x ", " $y ")";
		};

		WHILE: TEST(> $y $exitY) {
			PERFORM move "robotA" "down";
			RETRIEVE robotA $x $y;
			EXECUTE println "Robot A: (" $x ", " $y ")";
		};
	};

	RETRIEVE robotB $x $y;
	WHEN: TEST(|| (!= $x $exitX) (!= $y $exitY)) {
		WHILE: TEST(< $x $exitX) {
			PERFORM move "robotB" "right";
			RETRIEVE robotB $x $y;
			EXECUTE println "Robot B: (" $x ", " $y ")";
		};

		WHILE: TEST(> $x $exitX) {
			PERFORM move "robotB" "left";
			RETRIEVE robotB $x $y;
			EXECUTE println "Robot B: (" $x ", " $y ")";
		};

		WHILE: TEST(< $y $exitY) {
			PERFORM move "robotB" "up";
			RETRIEVE robotB $x $y;
			EXECUTE println "Robot B: (" $x ", " $y ")";
		};

		WHILE: TEST(> $y $exitY) {
			PERFORM move "robotB" "down";
			RETRIEVE robotB $x $y;
			EXECUTE println "Robot B: (" $x ", " $y ")";
		};
	};
}


PLAN:
{
NAME: 
	"Navigate robot A through every grid"

DOCUMENTATION:
	""
	
GOAL:
	ACHIEVE robotAClean;
	
BODY:
	RETRIEVE MAX_X $MAX_X;
	RETRIEVE MAX_Y $MAX_Y;

	RETRIEVE robotA $x $y;
	RETRIEVE robotADirection $horizontal $vertical;
	RETRIEVE robotAStepsTaken $iteration;

	ASSIGN $goVertical "false";

	WHEN: TEST(<= $iteration 0) {
		EXECUTE println "Robot A Started: (" $x ", " $y ")";
		PERFORM collect "robotA";
		PERFORM store "robotA";
	};

	WHEN: TEST(&& (|| (<= $x 0) (>= $x $MAX_X)) (> $iteration 0)) {
		WHEN: TEST(== $horizontal "left") {
			UPDATE (robotADirection) (robotADirection "right" $vertical);
			ASSIGN $goVertical "true";
		};

		WHEN: TEST(== $horizontal "right") {
			UPDATE (robotADirection) (robotADirection "left" $vertical);
			ASSIGN $goVertical "true";
		};

		WHEN: TEST(&& (== $vertical "down") (== $y 0)) {
			UPDATE (robotADirection) (robotADirection $horizontal "up");
		};

		WHEN: TEST(&& (== $vertical "up") (== $y $MAX_Y)) {
			UPDATE (robotADirection) (robotADirection $horizontal "down");
		};
	};

	RETRIEVE allVisited $allVisited;
	WHEN: TEST(== $allVisited "false") {
		WHEN: TEST(&& (== $horizontal "left") (FACT visited (- $x 1) $y)) {
			UPDATE (robotADirection) (robotADirection "right" $vertical);
			ASSIGN $goVertical "true";
		};

		WHEN: TEST(&& (== $horizontal "right") (FACT visited (+ $x 1) $y)) {
			UPDATE (robotADirection) (robotADirection "left" $vertical);
			ASSIGN $goVertical "true";
		};
	};
	
	RETRIEVE robotA $x $y;
	RETRIEVE robotADirection $horizontal $vertical;

	// Take one additional step vertically
	WHEN: TEST(== $goVertical "true") {
		PERFORM move "robotA" $vertical;
		PERFORM collect "robotA";
		PERFORM store "robotA";

		RETRIEVE robotA $x $y;
		EXECUTE println "Robot A: (" $x ", " $y ")";
		ASSIGN $goVertical "false";
	};

	WHEN: TEST(&& (== $horizontal "right") (< $x $MAX_X)) {
		PERFORM move "robotA" "right";
	};

	WHEN: TEST(&& (== $horizontal "left") (> $x 0)) {
		PERFORM move "robotA" "left";
	};

	PERFORM collect "robotA";
	PERFORM store "robotA";
	UPDATE (robotAStepsTaken) (robotAStepsTaken (+ $iteration 1));

	RETRIEVE robotA $x $y;
	EXECUTE println "Robot A: (" $x ", " $y ")";
	
FAILURE:
	EXECUTE println "Failed to move the robot";
}

PLAN:
{
NAME: 
	"Move robot B to scan over every grid"
	
GOAL:
	ACHIEVE robotBClean;
	
BODY:
	RETRIEVE MAX_X $MAX_X;
	RETRIEVE MAX_Y $MAX_Y;

	RETRIEVE robotB $x $y;
	RETRIEVE robotBDirection $horizontal $vertical;
	RETRIEVE robotBStepsTaken $iteration;

	ASSIGN $goVertical "false";

	WHEN: TEST(<= $iteration 0) {
		EXECUTE println "Robot B Started: (" $x ", " $y ")";
		PERFORM collect "robotB";
		PERFORM store "robotB";
	};

	WHEN: TEST(&& (|| (<= $x 0) (>= $x $MAX_X)) (> $iteration 0)) {
		WHEN: TEST(|| (== $horizontal "left") (FACT visited (- $x 1) $y)) {
			UPDATE (robotBDirection) (robotBDirection "right" $vertical);
			ASSIGN $goVertical "true";
		};

		WHEN: TEST(|| (== $horizontal "right") (FACT visited (+ $x 1) $y)) {
			UPDATE (robotBDirection) (robotBDirection "left" $vertical);
			ASSIGN $goVertical "true";
		};

		WHEN: TEST(&& (== $vertical "down") (== $y 0)) {
			UPDATE (robotBDirection) (robotBDirection $horizontal "up");
		};

		WHEN: TEST(&& (== $vertical "up") (== $y $MAX_Y)) {
			UPDATE (robotBDirection) (robotBDirection $horizontal "down");
		};
	};

	RETRIEVE allVisited $allVisited;
	WHEN: TEST(== $allVisited "false") {
		WHEN: TEST(&& (== $horizontal "left") (FACT visited (- $x 1) $y)) {
			UPDATE (robotBDirection) (robotBDirection "right" $vertical);
			ASSIGN $goVertical "true";
		};

		WHEN: TEST(&& (== $horizontal "right") (FACT visited (+ $x 1) $y)) {
			UPDATE (robotBDirection) (robotBDirection "left" $vertical);
			ASSIGN $goVertical "true";
		};
	};
	
	RETRIEVE robotB $x $y;
	RETRIEVE robotBDirection $horizontal $vertical;

	// Take one additional step vertically
	WHEN: TEST(== $goVertical "true") {
		PERFORM move "robotB" $vertical;
		PERFORM collect "robotB";
		PERFORM store "robotB";

		RETRIEVE robotB $x $y;
		EXECUTE println "Robot B: (" $x ", " $y ")";
		ASSIGN $goVertical "false";
	};

	WHEN: TEST(&& (== $horizontal "right") (< $x $MAX_X)) {
		PERFORM move "robotB" "right";
	};

	WHEN: TEST(&& (== $horizontal "left") (> $x 0)) {
		PERFORM move "robotB" "left";
	};

	PERFORM collect "robotB";
	PERFORM store "robotB";
	UPDATE (robotBStepsTaken) (robotBStepsTaken (+ $iteration 1));

	RETRIEVE robotB $x $y;
	EXECUTE println "Robot B: (" $x ", " $y ")";
	
FAILURE:
	EXECUTE println "Failed to move the robot";
}

PLAN:
{
NAME:
	"Move the given robot one step on the given direction"

GOAL:
	ACHIEVE move $robot $direction;

BODY:
	WHEN: TEST(== $robot "robotA") {
		RETRIEVE robotA $x $y;
	
		WHEN: TEST(== $direction "right") {
			UPDATE (robotA) (robotA (+ $x 1) $y);
		};
		WHEN: TEST(== $direction "left") {
			UPDATE (robotA) (robotA (- $x 1) $y);
		};
		WHEN: TEST(== $direction "up") {
			UPDATE (robotA) (robotA $x (+ $y 1));
		};
		WHEN: TEST(== $direction "down") {
			UPDATE (robotA) (robotA $x (- $y 1));
		};
	};
	
	WHEN: TEST(== $robot "robotB") {
		RETRIEVE robotB $x $y;
	
		WHEN: TEST(== $direction "right") {
			UPDATE (robotB) (robotB (+ $x 1) $y);
		};
		WHEN: TEST(== $direction "left") {
			UPDATE (robotB) (robotB (- $x 1) $y);
		};
		WHEN: TEST(== $direction "up") {
			UPDATE (robotB) (robotB $x (+ $y 1));
		};
		WHEN: TEST(== $direction "down") {
			UPDATE (robotB) (robotB $x (- $y 1));
		};
	};
	
FAILURE:
	EXECUTE println "Failed to move the robot";
}

PLAN:
{
NAME:
	"Check and collect dust at the location of the given robot"

GOAL:
	ACHIEVE collect $robot;

BODY:
	RETRIEVEALL $FACTS dust $x $y;

	WHEN: TEST(== $robot "robotA") {
		RETRIEVE robotA $rX $rY;
		WHILE: NEXTFACT $FACTS dust $x $y {
			WHEN: TEST(&& (== $x $rX) (== $y $rY)) {
				RETRACT dust $x $y;
				EXECUTE println "Robot A Collected: (" $x ", " $y ")";
			};
		};
	};

	WHEN: TEST(== $robot "robotB") {
		RETRIEVE robotB $rX $rY;
		WHILE: NEXTFACT $FACTS dust $x $y {
			WHEN: TEST(&& (== $x $rX) (== $y $rY)) {
				RETRACT dust $x $y;
				EXECUTE println "Robot B Collected: (" $x ", " $y ")";
			};
		};
	};

FAILURE:
	EXECUTE println "Failed to collect the dust";
}

PLAN:
{
NAME:
	"Store the visited location"

GOAL:
	ACHIEVE store $robot;

BODY:
	WHEN: TEST(== $robot "robotA") {
		RETRIEVE robotA $x $y;
		ASSERT visited $x $y;
	};

	WHEN: TEST(== $robot "robotB") {
		RETRIEVE robotB $x $y;
		ASSERT visited $x $y;
	};

	// EXECUTE println "\n--- Visited ---";
	// RETRIEVEALL $FACTS visited $x $y;
	// WHILE: NEXTFACT $FACTS visited $x $y {
	// 	EXECUTE println "Visited: (" $x ", " $y ")";
	// };
	// EXECUTE println "--- End Visited ---\n";

FAILURE:
	EXECUTE println "Failed to store the visited location";
}

PLAN:
{
NAME:
	"Check and update the attributes of the world"

GOAL:
	ACHIEVE check;

BODY:
	ASSIGN $dustCount 0;
	RETRIEVEALL $FACTS dust $x $y;
	WHILE: NEXTFACT $FACTS dust $x $y {
		ASSIGN $dustCount (+ $dustCount 1);
	};

	RETRIEVE MAX_X $MAX_X;
	RETRIEVE MAX_Y $MAX_Y;
	ASSIGN $visitedCount 0;
	ASSIGN $totalGrid (* (+ $MAX_X 1) (+ $MAX_Y 1));

	RETRIEVEALL $FACTS visited $x $y;
	WHILE: NEXTFACT $FACTS visited $x $y {
		ASSIGN $visitedCount (+ $visitedCount 1);
	};

	// EXECUTE println "\n--- Visited ---\n";
	// EXECUTE println $visitedCount " / " $totalGrid;
	// EXECUTE println "\n--- End ---\n";

	WHEN: TEST(<= $dustCount 0) {
		UPDATE (dustCleaned) (dustCleaned "true");
	};

	WHEN: TEST(>= $visitedCount $totalGrid) {
		UPDATE (allVisited) (allVisited "true");
	};
}