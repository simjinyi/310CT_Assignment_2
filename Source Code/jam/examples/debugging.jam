//  -*- Mode: Java -*-
//////////////////////////////////////////////////////////////////////////////
//  
//  $Id$
//  $Source$
//  
//  File              : ex5.jam
//  Author(s)         : marcush <marcush@irs.home.com>
//  
//  Description       : Test debugging primitive functionality
//  
//  Organization      : Intelligent Reasoning Systems
//  Created On        : Thu Jul  1 06:43:19 1999
//  Last Modified By  : <marcush@marcush.net>
//  Last Modified On  : Sun Oct 28 14:58:44 2001
//  Update Count      : 4
//  
//////////////////////////////////////////////////////////////////////////////
//
//  JAM agent architecture
//
//  Copyright (C) 1997-2001 Marcus J. Huber and Intelligent Reasoning Systems
//  
//  Permission is granted to copy and redistribute this software so long
//  as no fee is charged, and so long as the copyright notice above, this
//  grant of permission, and the disclaimer below appear in all copies
//  made.  JAM may not be bundled, or sold alone or as part of another
//  product, without permission.
//  
//  This software is provided as is, without representation as to its
//  fitness for any purpose, and without warranty of any kind, either
//  express or implied, including without limitation the implied
//  warranties of merchantability and fitness for a particular purpose.
//  Marcus J. Huber and Intelligent Reasoning Systems shall not be
//  liable for any damages, including special, indirect, incidental, or
//  consequential damages, with respect to any claim arising out of or
//  in connection with the use of the software, even if they have been
//  or are hereafter advised of the possibility of such damages.
// 
//////////////////////////////////////////////////////////////////////////////

GOALS:
    ACHIEVE JAM_test_done "Goal Name (JAM_test_done)";

FACTS:
    FACT test_done "False";
    FACT test_entry 1.0;
    FACT initialized "False";

OBSERVER:
{
    RETRIEVE initialized $VALUE;
    WHEN : TEST (== $VALUE "False") {
/*
        EXECUTE setShowAPL 1;
        EXECUTE setShowGoalList 1;
	EXECUTE setShowWorldModel 1;
	EXECUTE setShowIntentionStructure 1;
*/
	UPDATE (initialized) (initialized "True");
    };
}


Plan: {
NAME:
    "Test JAM"
GOAL:
    ACHIEVE JAM_test_done $goal_name;
CONTEXT:
    FACT test_done "False";
BODY:
    EXECUTE print "Goal Argument = " $goal_name "\n";
    ASSERT  goal_argument $goal_name;

    ASSIGN $VALUE 99;
    EXECUTE print "Value = " $VALUE "\n";
    ASSERT value $VALUE;
    RETRIEVE value $NEWVALUE;
    EXECUTE print "New Value = " $NEWVALUE;

    ASSERT test_wm "AAAA" 1.0 3;
    EXECUTE printWorldModel 3;

    ACHIEVE first_level_subgoal;

}

Plan: {
NAME:
    "Test subgoaling"
GOAL:
    ACHIEVE first_level_subgoal;
BODY:
    EXECUTE print "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n";

    ACHIEVE second_level_subgoal;
    
    EXECUTE print "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n";

    ASSERT test_wm "BBBB" 2.0 6;
    EXECUTE printWorldModel 1;

    OR {
	EXECUTE print "cccccccccccccccccccccccccccccc\n";
	EXECUTE print "dddddddddddddddddddddddddddddd\n";
	EXECUTE fail;
	EXECUTE print "eeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n";
    }
    {
	EXECUTE print "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n";
	EXECUTE print "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n";
	EXECUTE print "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n";
    };
}

Plan: {
NAME:
    "Test deeper subgoaling"
GOAL:
    ACHIEVE second_level_subgoal;
BODY:

    ASSERT test_wm "CCCC" 3.0 9;
    EXECUTE printWorldModel 1;
}

