/* Generated By:JavaCC: Do not edit this line. JAMParserTokenManager.java */
package com.irs.jam;
import java.io.*;
import java.lang.reflect.*;

public class JAMParserTokenManager implements JAMParserConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4004040000000000L) != 0L || (active1 & 0x440L) != 0L)
         {
            jjmatchedKind = 81;
            return 64;
         }
         if ((active1 & 0x4020L) != 0L)
         {
            jjmatchedKind = 81;
            return 43;
         }
         if ((active0 & 0x860000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            return 52;
         }
         if ((active0 & 0x14L) != 0L)
         {
            jjmatchedKind = 84;
            return 3;
         }
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 81;
            return 19;
         }
         if ((active0 & 0x2000100000000000L) != 0L || (active1 & 0x90L) != 0L)
         {
            jjmatchedKind = 81;
            return 131;
         }
         if ((active0 & 0x101b000000000000L) != 0L || (active1 & 0x2b0bL) != 0L)
         {
            jjmatchedKind = 81;
            return 173;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 81;
            return 117;
         }
         if ((active0 & 0xe00000000000L) != 0L)
         {
            jjmatchedKind = 81;
            return 34;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 81;
            return 13;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 1;
            }
            return 116;
         }
         if ((active0 & 0xe00000000000L) != 0L)
            return 33;
         if ((active0 & 0x10080000000000L) != 0L)
            return 173;
         if ((active0 & 0x10L) != 0L)
            return 1;
         if ((active0 & 0x786b140000000000L) != 0L || (active1 & 0x6fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 1;
            }
            return 173;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 1;
            }
            return 63;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
            return 115;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 173;
         if ((active0 & 0x786f700000000000L) != 0L || (active1 & 0x6fffL) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
            return 173;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
            return 123;
         }
         return -1;
      case 3:
         if ((active1 & 0x1000L) != 0L)
            return 122;
         if ((active0 & 0x106a000000000000L) != 0L || (active1 & 0x18L) != 0L)
            return 173;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 112;
         if ((active0 & 0x6805700000000000L) != 0L || (active1 & 0x6fe7L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 3;
            }
            return 173;
         }
         return -1;
      case 4:
         if ((active0 & 0x2001000000000000L) != 0L || (active1 & 0x200L) != 0L)
            return 173;
         if ((active0 & 0x4824700000000000L) != 0L || (active1 & 0x6de7L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
            return 173;
         }
         return -1;
      case 5:
         if ((active0 & 0x4024600000000000L) != 0L || (active1 & 0x4420L) != 0L)
            return 173;
         if ((active0 & 0x800100000000000L) != 0L || (active1 & 0x29c7L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
            return 173;
         }
         return -1;
      case 6:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x28c0L) != 0L)
            return 173;
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x107L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
            return 173;
         }
         return -1;
      case 7:
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x107L) != 0L)
            return 173;
         return -1;
      case 8:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 8;
            return 173;
         }
         return -1;
      case 9:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 9;
            return 173;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 9);
      case 40:
         return jjStopAtPos(0, 91);
      case 41:
         return jjStopAtPos(0, 92);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x14L, 0x0L);
      case 58:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x780000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 87);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4004040000000000L, 0x440L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0xe00000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x860000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x2000100000000000L, 0x90L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2003L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4020L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0xb000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 89);
      case 93:
         return jjStopAtPos(0, 90);
      case 123:
         return jjStopAtPos(0, 85);
      case 125:
         return jjStopAtPos(0, 86);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 4, 1);
         break;
      case 47:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xa008100000000000L, active1, 0x1100L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x208fL);
      case 70:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 173);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x400040000000000L, active1, 0x20L);
      case 79:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000600000000000L, active1, 0x10L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 82:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 173);
         break;
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x400L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0xa00L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x800L);
      case 68:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x882000000000000L, active1, 0x200L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000000000000L, active1, 0x1100L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000100000000000L, active1, 0x80L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4060000000000000L, active1, 0x418L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x2003L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 89:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         break;
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x700000000000L, active1, 0x4000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x800L);
      case 68:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 173);
         break;
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x400L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x4100000000000000L, active1, 0x40L);
      case 76:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 122);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2203L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 173);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 112);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 173);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 69:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 173);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 173);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x840L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x24000000000000L, active1, 0x3L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x100300000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
      case 84:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4100L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 89:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 173);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x104L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 69:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x803L);
      case 70:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 173);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 173);
         break;
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 84:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 173);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 89:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 173);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 68:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 173);
         break;
      case 69:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 173);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 77:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 173);
         break;
      case 84:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3L);
      case 89:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(6, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L);
      case 76:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 173);
         break;
      case 78:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 173);
         break;
      case 84:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 173);
         break;
      case 89:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(7, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa10_0(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 76:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(10, 65, 173);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 173;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 123:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 43:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 117:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 116:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 131:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 115:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 33:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 52:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 173:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 19:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 63:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 122:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 34:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 13:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 112:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAddStates(3, 5);
                  }
                  else if ((0x5000ac2200000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 95;
                  else if (curChar == 61)
                     jjCheckNAdd(90);
                  else if (curChar == 36)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(88);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 62)
                     jjCheckNAdd(90);
                  else if (curChar == 60)
                     jjCheckNAdd(90);
                  else if (curChar == 33)
                     jjCheckNAdd(90);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 64:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 0:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 7:
                  if (curChar == 58 && kind > 29)
                     kind = 29;
                  break;
               case 16:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(11, 12);
                  break;
               case 17:
                  if (curChar == 58 && kind > 31)
                     kind = 31;
                  break;
               case 22:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 23:
                  if (curChar == 58 && kind > 32)
                     kind = 32;
                  break;
               case 37:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 38:
                  if (curChar == 58 && kind > 37)
                     kind = 37;
                  break;
               case 46:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 47:
                  if (curChar == 58 && kind > 38)
                     kind = 38;
                  break;
               case 55:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 56:
                  if (curChar == 58 && kind > 40)
                     kind = 40;
                  break;
               case 67:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 68:
                  if (curChar == 58 && kind > 41)
                     kind = 41;
                  break;
               case 72:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(23, 26);
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(27, 29);
                  break;
               case 77:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 72);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if (curChar != 46)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(30, 33);
                  break;
               case 81:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(34, 36);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(37, 41);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(42, 47);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(48, 52);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(53, 58);
                  break;
               case 87:
                  if (curChar != 36)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(88);
                  break;
               case 89:
                  if ((0x5000ac2200000000L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 90:
                  if (curChar == 61 && kind > 84)
                     kind = 84;
                  break;
               case 91:
                  if (curChar == 61)
                     jjCheckNAdd(90);
                  break;
               case 92:
                  if (curChar == 33)
                     jjCheckNAdd(90);
                  break;
               case 93:
                  if (curChar == 60)
                     jjCheckNAdd(90);
                  break;
               case 94:
                  if (curChar == 62)
                     jjCheckNAdd(90);
                  break;
               case 95:
                  if (curChar == 38 && kind > 84)
                     kind = 84;
                  break;
               case 96:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 101:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 102:
                  if (curChar == 58 && kind > 27)
                     kind = 27;
                  break;
               case 107:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 108:
                  if (curChar == 58 && kind > 33)
                     kind = 33;
                  break;
               case 113:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 114:
                  if (curChar == 58 && kind > 28)
                     kind = 28;
                  break;
               case 119:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 120:
                  if (curChar == 58 && kind > 39)
                     kind = 39;
                  break;
               case 128:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 129:
                  if (curChar == 58 && kind > 30)
                     kind = 30;
                  break;
               case 133:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 134:
                  if (curChar == 58 && kind > 36)
                     kind = 36;
                  break;
               case 147:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 148:
                  if (curChar == 58 && kind > 34)
                     kind = 34;
                  break;
               case 156:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 157:
                  if (curChar == 58 && kind > 35)
                     kind = 35;
                  break;
               case 163:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(164);
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddStates(3, 5);
                  break;
               case 167:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(167);
                  break;
               case 169:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(0, 2);
                  break;
               case 170:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 172:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(75, 77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 123:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 117:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 131:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 115:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 173:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 122:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 112:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddStates(78, 81);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 97;
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(82, 83);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(84, 85);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(86, 87);
                  else if ((0x8000000080L & l) != 0L)
                     jjAddStates(88, 89);
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(167);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 2:
                  if (kind > 3)
                     kind = 3;
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(11, 12);
                  break;
               case 18:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 20:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 35:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x200000002000000L & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 39:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 48:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 58:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 65:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x200000002000000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 69:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(90, 91);
                  break;
               case 80:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(92, 93);
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 97:
                  if (curChar == 124 && kind > 84)
                     kind = 84;
                  break;
               case 98:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 100:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 103:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 104:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 109:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 110:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 118:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 121:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 124:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 127:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 130:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 132:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 135:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 136:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 149:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 150:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 158:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 159:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 166:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(78, 81);
                  break;
               case 167:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(167);
                  break;
               case 168:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(0, 2);
                  break;
               case 169:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(0, 2);
                  break;
               case 171:
               case 172:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(75, 77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 3)
                     kind = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 173 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x80L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 10);
      case 92:
         return jjMoveStringLiteralDfa1_4(0xf800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x40L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   168, 169, 170, 164, 78, 79, 164, 78, 72, 6, 7, 16, 17, 22, 23, 37, 
   38, 46, 47, 55, 56, 67, 68, 72, 74, 77, 86, 72, 77, 85, 80, 72, 
   77, 84, 72, 77, 83, 78, 79, 72, 77, 83, 78, 79, 80, 72, 77, 84, 
   78, 79, 72, 77, 85, 78, 79, 72, 74, 77, 86, 101, 102, 107, 108, 113, 
   114, 119, 120, 128, 129, 133, 134, 147, 148, 156, 157, 168, 170, 172, 167, 168, 
   169, 170, 154, 162, 131, 144, 117, 125, 105, 110, 75, 76, 81, 82, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\101\116\104", "\117\122", "\120\101\122\101\114\114\105\114", 
"\104\117\137\101\114\114", "\104\117\137\101\116\131", "\104\117", "\127\110\111\114\105", 
"\127\110\105\116", "\101\124\117\115\111\103", "\127\101\111\124", "\111\106", 
"\105\114\123\105\111\106", "\105\114\123\105", "\72\124\105\123\124", "\72\125\124\111\114\111\124\131", 
"\72\102\131", "\72\116\117\124\55\102\131", "\105\130\105\103\125\124\105", 
"\114\117\101\104", "\120\101\122\123\105", "\101\123\123\111\107\116", "\106\101\103\124", 
"\122\105\124\122\111\105\126\105", "\122\105\124\122\111\105\126\105\101\114\114", 
"\116\105\130\124\106\101\103\124", "\124\105\123\124", "\120\117\123\124", "\125\116\120\117\123\124", 
"\101\103\110\111\105\126\105", "\120\105\122\106\117\122\115", "\115\101\111\116\124\101\111\116", 
"\121\125\105\122\131", "\101\123\123\105\122\124", "\123\125\103\103\105\105\104", 
"\106\101\111\114", "\122\105\124\122\101\103\124", "\125\120\104\101\124\105", null, null, null, 
null, null, null, "\173", "\175", "\73", "\72", "\133", "\135", "\50", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_STRING", 
};
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, 3, 0, 0, 0, -1, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffff8000401L, 0x1fffffffL, 
};
static final long[] jjtoSkip = {
   0x2e2L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe2L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1f91cL, 0x0L, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[173];
private final int[] jjstateSet = new int[346];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public JAMParserTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JAMParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 173; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
final void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 3 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                     input_stream.backup(1);
         break;
      case 11 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
           image.setLength(image.length() - 2); image.append("\"");
         break;
      case 12 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
           image.setLength(image.length() - 2); image.append("\t");
         break;
      case 13 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
           image.setLength(image.length() - 2); image.append("\n");
         break;
      case 14 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
           image.setLength(image.length() - 2); image.append("\r");
         break;
      case 15 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
           image.setLength(image.length() - 2); image.append("\f");
         break;
      default : 
         break;
   }
}
final void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 10 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
        image.setLength(image.length() - 1);
        matchedToken.image = image.toString();
         break;
      default : 
         break;
   }
}
}
