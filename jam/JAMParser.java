/* Generated By:JavaCC: Do not edit this line. JAMParser.java */
package com.irs.jam;

import java.io.*;
import java.lang.reflect.*;

public class JAMParser implements JAMParserConstants {
  private static int _versionReal      = 65;
  private static int _versionImaginary = 76;
  private static String _versionDate = "[November, 2001]";
  public String _filename = null;

  public JAMParser()
  {
  }

  /**
   * Command-line interface to parser to facilitate testing.
   *
   */
  public static void main(String args[])
  {
    JAMParser parser;
    Interpreter interpreter = new Interpreter();

    System.out.println("JAM Parser Version " + _versionReal + " + " +
                       _versionImaginary + "i " + _versionDate + ": ");

    if (args.length == 0) {
      System.out.println("Reading from standard input . . .");
      parser = new JAMParser(new java.io.DataInputStream(System.in));
    }
    else if (args.length == 1) {
      System.out.println("Reading from file " + args[0] + " . . .");

      try {
        parser = new JAMParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
        parser._filename = args[0];
      }
      catch (java.io.FileNotFoundException e) {
        System.out.println("\n\nFile " + args[0] + " not found!\n\n");
        return;
      }
    }
    else {
      System.out.println("Usage is one of:");
      System.out.println("\t java JAMParser < inputfile");
      System.out.println("OR");
      System.out.println("\t java JAMParser inputfile");
      return;
    }

    try {
      parser.ParseJamAgentDefinition(interpreter);
      System.out.println("JAM program parsed successfully.");
    }
    catch (ParseException e) {
      System.out.println("Encountered parsing exception " + e +
                         " during parse.");
      e.printStackTrace();
    }
    catch (Exception e) {
      System.out.println("Encountered other exception " + e +
                         " during parse.");
      e.printStackTrace();
    }
  }

  /**
   * Primary JAM interface to parser
   *
   */
  public void buildInterpreter(String filename, String buf, Interpreter interpreter) throws ParseException
  {
    JAMParser parser;

    System.out.println("JAM Parser Version " + _versionReal + " + " +
                       _versionImaginary + "i: ");

    parser = new JAMParser(new ByteArrayInputStream(buf.getBytes()));
    parser._filename = filename;
    parser.ParseJamAgentDefinition(interpreter);
    System.out.println("JAM definition parse successful.");
  }


  /**
   * Secondary JAM interface used to internalize agent constructs
   * from strings during execution.
   *
   */
  public void parseString(Interpreter interpreter, String filename, String buf)
  {
    JAMParser parser;

    System.out.println("JAM Parser Version " + _versionReal + " + " +
                       _versionImaginary + "i: ");

    _filename = filename;
    parser = new JAMParser(new ByteArrayInputStream(buf.getBytes()));

    try {
      Interpreter tmpI = parser.ParseJamAgentDefinition(interpreter);
      System.out.println("JAM string parse successful.");
    }
    catch (ParseException e) {
      System.out.println("Encountered parse exception " + e +
                         " during parse.");
      e.printStackTrace();
    }
    catch (Exception e) {
      System.out.println("Encountered other exception " + e +
                         " during parse.");
      e.printStackTrace();
    }
  }

//
//
//
  final public Interpreter ParseJamAgentDefinition(Interpreter interpreter) throws ParseException {
  if (interpreter == null)
    interpreter = new Interpreter();
    agent_components(interpreter);
      {if (true) return interpreter;}
    throw new Error("Missing return statement in function");
  }

/**********************************************************************/
/*								      */
/*	Agent Components					      */
/*								      */
/**********************************************************************/
  final public void agent_components(Interpreter interpreter) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOAL_DECL:
        jj_consume_token(GOAL_DECL);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACHIEVE:
          case PERFORM:
          case MAINTAIN:
          case QUERY:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_2;
          }
          goal(interpreter);
        }
        break;
      case FACT_DECL:
        jj_consume_token(FACT_DECL);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FACT:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_3;
          }
          fact(interpreter);
        }
        break;
      case PLAN_START:
        jj_consume_token(PLAN_START);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_4;
          }
          plan(interpreter);
        }
        break;
      case OBSERVER_DECL:
        jj_consume_token(OBSERVER_DECL);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_5;
          }
     Plan currentPlan = new Plan();
     PlanSequenceConstruct body_elements = null;
          jj_consume_token(85);
          body_elements = plan_body_elements(currentPlan, interpreter);
          jj_consume_token(86);
     currentPlan.setBody(body_elements);
     interpreter.setObserver(currentPlan);
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOAL_DECL:
      case FACT_DECL:
      case OBSERVER_DECL:
      case PLAN_START:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
    }
  }

/**********************************************************************/
/*								      */
/*	GOAL							      */
/*								      */
/**********************************************************************/
  final public void goal(Interpreter interpreter) throws ParseException {
  GoalAction goal = null;
    goal = goal_action(null, interpreter);
    jj_consume_token(87);
      interpreter.getIntentionStructure().addUnique(goal, null, null, null);
  }

/**********************************************************************/
/*								      */
/*	FACT							      */
/*								      */
/**********************************************************************/
  final public void fact(Interpreter interpreter) throws ParseException {
  Token cm;
  Token id;
  ExpList el;
  Relation rel;
    cm = jj_consume_token(FACT);
    id = jj_consume_token(IDENTIFIER);
    el = explist(null, interpreter);
    jj_consume_token(87);
      rel = new Relation(id.image, el, interpreter);
      interpreter.getWorldModel().assert(rel, null);
  }

/**********************************************************************/
/*								      */
/*	PLAN							      */
/*								      */
/**********************************************************************/
  final public void plan(Interpreter interpreter) throws ParseException {
    Plan currentPlan = new Plan();
    jj_consume_token(85);
    plan_components(currentPlan, interpreter);
    jj_consume_token(86);
        if (currentPlan.getGoalSpecification() != null) {
          interpreter.getPlanLibrary().add(currentPlan,
                                           ((GoalAction) currentPlan.getGoalSpecification()).getGoal().getName());
        }
        else {
          interpreter.getPlanLibrary().add(currentPlan,
                                           currentPlan.getConcludeSpecification().getName());
        }
  }

  final public void plan_components(Plan currentPlan, Interpreter interpreter) throws ParseException {
    plan_component(currentPlan, interpreter);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLAN_NAME:
      case PLAN_DOC:
      case PLAN_GOALSPEC:
      case PLAN_CONCLUDESPEC:
      case PLAN_CONTEXT:
      case PLAN_PRECONDITION:
      case PLAN_UTILITY:
      case PLAN_EFFECTS:
      case PLAN_FAILURE:
      case PLAN_ATTRIBUTES:
      case PLAN_BODY:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      plan_component(currentPlan, interpreter);
    }
  }

  final public void plan_component(Plan currentPlan, Interpreter interpreter) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLAN_NAME:
      plan_name(currentPlan);
      break;
    case PLAN_DOC:
      plan_doc(currentPlan);
      break;
    case PLAN_GOALSPEC:
      plan_goalspec(currentPlan, interpreter);
      break;
    case PLAN_CONCLUDESPEC:
      plan_concludespec(currentPlan, interpreter);
      break;
    case PLAN_CONTEXT:
      plan_context(currentPlan, interpreter);
      break;
    case PLAN_PRECONDITION:
      plan_precondition(currentPlan, interpreter);
      break;
    case PLAN_UTILITY:
      plan_utility(currentPlan, interpreter);
      break;
    case PLAN_EFFECTS:
      plan_effects(currentPlan, interpreter);
      break;
    case PLAN_FAILURE:
      plan_failure(currentPlan, interpreter);
      break;
    case PLAN_ATTRIBUTES:
      plan_attributes(currentPlan);
      break;
    case PLAN_BODY:
      plan_body(currentPlan, interpreter);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/****************/
/* Name		*/
/* Doc		*/
/* Attributes	*/
/****************/
  final public void plan_name(Plan currentPlan) throws ParseException {
  Token t_s = null;
    jj_consume_token(PLAN_NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t_s = jj_consume_token(STRING);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      if (t_s != null)
        currentPlan.setName(t_s.image);
  }

  final public void plan_doc(Plan currentPlan) throws ParseException {
  Token t_s = null;
    jj_consume_token(PLAN_DOC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t_s = jj_consume_token(STRING);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
      if (t_s != null)
        currentPlan.setDocumentation(t_s.image);
  }

  final public void plan_attributes(Plan currentPlan) throws ParseException {
  Token t_s = null;
    jj_consume_token(PLAN_ATTRIBUTES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t_s = jj_consume_token(STRING);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
      if (t_s != null)
        currentPlan.setAttributes(t_s.image);
  }

/**********************/
/* Goal Specification */
/**********************/
  final public void plan_goalspec(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Relation rel = null;
  Action ga = null;
    jj_consume_token(PLAN_GOALSPEC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACHIEVE:
    case PERFORM:
    case MAINTAIN:
    case QUERY:
      ga = goal_action(currentPlan, interpreter);
      jj_consume_token(87);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
     if (ga != null) {
       currentPlan.setGoalSpecification(ga);
       currentPlan.setConcludeSpecification(rel);
     }
  }

/*******************************/
/* Plan Conclude Specification */
/*******************************/
  final public void plan_concludespec(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Action ga = null;
  Relation rel = null;
    jj_consume_token(PLAN_CONCLUDESPEC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      rel = relation(currentPlan, interpreter);
      jj_consume_token(87);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
     if (rel != null) {
       currentPlan.setConcludeSpecification(rel);
       currentPlan.setGoalSpecification(ga);
     }
  }

/***********/
/* Context */
/***********/
  final public void plan_context(Plan currentPlan, Interpreter interpreter) throws ParseException {
  ConditionList c = null;
    jj_consume_token(PLAN_CONTEXT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case FACT:
    case RETRIEVE:
    case INTEGER:
    case FLOAT:
    case CLASS_IDENTIFIER:
    case VARIABLE:
    case 91:
      c = condition_list(currentPlan, interpreter);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
     if (c != null) {
       PlanContext context = new PlanContext(c);
       currentPlan.setContext(context);
     }
  }

/***********/
/* Context */
/***********/
  final public void plan_precondition(Plan currentPlan, Interpreter interpreter) throws ParseException {
  ConditionList c = null;
    jj_consume_token(PLAN_PRECONDITION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case FACT:
    case RETRIEVE:
    case INTEGER:
    case FLOAT:
    case CLASS_IDENTIFIER:
    case VARIABLE:
    case 91:
      c = condition_list(currentPlan, interpreter);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
     if (c != null) {
       PlanContext precondition = new PlanContext(c);
       currentPlan.setPrecondition(precondition);
     }
  }

/************/
/* Utility */
/************/
  final public void plan_utility(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Expression e = null;
    jj_consume_token(PLAN_UTILITY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INTEGER:
    case FLOAT:
    case CLASS_IDENTIFIER:
    case VARIABLE:
    case 91:
      e = expression(currentPlan, interpreter);
      jj_consume_token(87);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
      if (e != null)
        currentPlan.setUtility(e);
  }

/*********************/
/* Effects / Failure  */
/*********************/
  final public void plan_effects(Plan currentPlan, Interpreter interpreter) throws ParseException {
  PlanSequenceConstruct body_elements = null;
  PlanAtomicConstruct atomic_element = null;
    jj_consume_token(PLAN_EFFECTS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLAN_BODY_AND:
    case PLAN_BODY_OR:
    case PLAN_BODY_PARALLEL:
    case PLAN_BODY_DO_ALL:
    case PLAN_BODY_DO_ANY:
    case PLAN_BODY_DO:
    case PLAN_BODY_WHILE:
    case PLAN_BODY_WHEN:
    case PLAN_BODY_ATOMIC:
    case PLAN_BODY_WAIT:
    case EXECUTE:
    case LOAD:
    case ASSIGN:
    case FACT:
    case RETRIEVE:
    case RETRIEVEALL:
    case NEXTFACT:
    case TEST:
    case POST:
    case UNPOST:
    case ACHIEVE:
    case PERFORM:
    case MAINTAIN:
    case QUERY:
    case ASSERT:
    case SUCCEED:
    case FAIL:
    case RETRACT:
    case UPDATE:
      body_elements = plan_body_elements(currentPlan, interpreter);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
      if (body_elements != null)
        {
          atomic_element = new PlanAtomicConstruct(body_elements);
          currentPlan.setEffects(atomic_element);
        }
  }

  final public void plan_failure(Plan currentPlan, Interpreter interpreter) throws ParseException {
  PlanSequenceConstruct body_elements = null;
  PlanAtomicConstruct atomic_element = null;
    jj_consume_token(PLAN_FAILURE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLAN_BODY_AND:
    case PLAN_BODY_OR:
    case PLAN_BODY_PARALLEL:
    case PLAN_BODY_DO_ALL:
    case PLAN_BODY_DO_ANY:
    case PLAN_BODY_DO:
    case PLAN_BODY_WHILE:
    case PLAN_BODY_WHEN:
    case PLAN_BODY_ATOMIC:
    case PLAN_BODY_WAIT:
    case EXECUTE:
    case LOAD:
    case ASSIGN:
    case FACT:
    case RETRIEVE:
    case RETRIEVEALL:
    case NEXTFACT:
    case TEST:
    case POST:
    case UNPOST:
    case ACHIEVE:
    case PERFORM:
    case MAINTAIN:
    case QUERY:
    case ASSERT:
    case SUCCEED:
    case FAIL:
    case RETRACT:
    case UPDATE:
      body_elements = plan_body_elements(currentPlan, interpreter);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
      if (body_elements != null)
        {
          atomic_element = new PlanAtomicConstruct(body_elements);
          currentPlan.setFailure(atomic_element);
        }
  }

/***********/
/* Body	   */
/***********/
  final public void plan_body(Plan currentPlan, Interpreter interpreter) throws ParseException {
  PlanSequenceConstruct body_elements = null;
    jj_consume_token(PLAN_BODY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLAN_BODY_AND:
    case PLAN_BODY_OR:
    case PLAN_BODY_PARALLEL:
    case PLAN_BODY_DO_ALL:
    case PLAN_BODY_DO_ANY:
    case PLAN_BODY_DO:
    case PLAN_BODY_WHILE:
    case PLAN_BODY_WHEN:
    case PLAN_BODY_ATOMIC:
    case PLAN_BODY_WAIT:
    case EXECUTE:
    case LOAD:
    case ASSIGN:
    case FACT:
    case RETRIEVE:
    case RETRIEVEALL:
    case NEXTFACT:
    case TEST:
    case POST:
    case UNPOST:
    case ACHIEVE:
    case PERFORM:
    case MAINTAIN:
    case QUERY:
    case ASSERT:
    case SUCCEED:
    case FAIL:
    case RETRACT:
    case UPDATE:
      body_elements = plan_body_elements(currentPlan, interpreter);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
      if (body_elements != null)
        currentPlan.setBody(body_elements);
  }

  final public PlanSequenceConstruct plan_branch(Plan currentPlan, Interpreter interpreter) throws ParseException {
  PlanSequenceConstruct s;
    jj_consume_token(85);
    s = plan_body_elements(currentPlan, interpreter);
    jj_consume_token(86);
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public PlanSequenceConstruct plan_body_elements(Plan currentPlan, Interpreter interpreter) throws ParseException {
  PlanSequenceConstruct s = new PlanSequenceConstruct();
  PlanConstruct ct;
    ct = plan_body_element(currentPlan, interpreter);
      s.insertConstruct(ct);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLAN_BODY_AND:
      case PLAN_BODY_OR:
      case PLAN_BODY_PARALLEL:
      case PLAN_BODY_DO_ALL:
      case PLAN_BODY_DO_ANY:
      case PLAN_BODY_DO:
      case PLAN_BODY_WHILE:
      case PLAN_BODY_WHEN:
      case PLAN_BODY_ATOMIC:
      case PLAN_BODY_WAIT:
      case EXECUTE:
      case LOAD:
      case ASSIGN:
      case FACT:
      case RETRIEVE:
      case RETRIEVEALL:
      case NEXTFACT:
      case TEST:
      case POST:
      case UNPOST:
      case ACHIEVE:
      case PERFORM:
      case MAINTAIN:
      case QUERY:
      case ASSERT:
      case SUCCEED:
      case FAIL:
      case RETRACT:
      case UPDATE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      ct = plan_body_element(currentPlan, interpreter);
      s.insertConstruct(ct);
    }
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public PlanConstruct plan_body_element(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Action a;
  PlanSequenceConstruct s;
  PlanConstruct ct;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXECUTE:
    case LOAD:
    case ASSIGN:
    case FACT:
    case RETRIEVE:
    case RETRIEVEALL:
    case NEXTFACT:
    case TEST:
    case POST:
    case UNPOST:
    case ACHIEVE:
    case PERFORM:
    case MAINTAIN:
    case QUERY:
    case ASSERT:
    case SUCCEED:
    case FAIL:
    case RETRACT:
    case UPDATE:
      a = action(currentPlan, interpreter);
      jj_consume_token(87);
        {if (true) return new PlanSimpleConstruct(a);}
      break;
    case PLAN_BODY_AND:
      jj_consume_token(PLAN_BODY_AND);
      ct = new PlanBranchConstruct(null, PlanBranchConstruct.PLAN_AND_BRANCH);
      s = plan_branch(currentPlan, interpreter);
      ((PlanBranchConstruct) ct).addBranch(s);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        s = plan_branch(currentPlan, interpreter);
      ((PlanBranchConstruct) ct).addBranch(s);
      }
      jj_consume_token(87);
      {if (true) return ct;}
      break;
    case PLAN_BODY_OR:
      jj_consume_token(PLAN_BODY_OR);
      ct = new PlanBranchConstruct(null, PlanBranchConstruct.PLAN_OR_BRANCH);
      s = plan_branch(currentPlan, interpreter);
      ((PlanBranchConstruct) ct).addBranch(s);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        s = plan_branch(currentPlan, interpreter);
      ((PlanBranchConstruct) ct).addBranch(s);
      }
      jj_consume_token(87);
      {if (true) return ct;}
      break;
    case PLAN_BODY_PARALLEL:
      jj_consume_token(PLAN_BODY_PARALLEL);
      ct = new PlanParallelConstruct();
      s = plan_branch(currentPlan, interpreter);
      ((PlanParallelConstruct) ct).insertConstruct(s);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        s = plan_branch(currentPlan, interpreter);
      ((PlanParallelConstruct) ct).insertConstruct(s);
      }
      jj_consume_token(87);
     {if (true) return ct;}
      break;
    case PLAN_BODY_DO_ALL:
      jj_consume_token(PLAN_BODY_DO_ALL);
      ct = new PlanDoAllConstruct();
      s = plan_branch(currentPlan, interpreter);
    ((PlanDoAllConstruct) ct).addBranch(s);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_11;
        }
        s = plan_branch(currentPlan, interpreter);
    ((PlanDoAllConstruct) ct).addBranch(s);
      }
      jj_consume_token(87);
      {if (true) return ct;}
      break;
    case PLAN_BODY_DO_ANY:
      jj_consume_token(PLAN_BODY_DO_ANY);
      ct = new PlanDoAnyConstruct();
      s = plan_branch(currentPlan, interpreter);
      ((PlanDoAnyConstruct) ct).addBranch(s);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_12;
        }
        s = plan_branch(currentPlan, interpreter);
      ((PlanDoAnyConstruct) ct).addBranch(s);
      }
      jj_consume_token(87);
      {if (true) return ct;}
      break;
    case PLAN_BODY_WAIT:
      ct = wait_construct(currentPlan, interpreter);
    {if (true) return ct;}
      break;
    case PLAN_BODY_WHEN:
      jj_consume_token(PLAN_BODY_WHEN);
      jj_consume_token(88);
      a = action(currentPlan, interpreter);
      s = plan_branch(currentPlan, interpreter);
      jj_consume_token(87);
      ct = new PlanWhenConstruct(a, s);
      {if (true) return ct;}
      break;
    case PLAN_BODY_WHILE:
      jj_consume_token(PLAN_BODY_WHILE);
      jj_consume_token(88);
      a = action(currentPlan, interpreter);
      s = plan_branch(currentPlan, interpreter);
      jj_consume_token(87);
      ct = new PlanWhileConstruct(a, s);
      {if (true) return ct;}
      break;
    case PLAN_BODY_DO:
      jj_consume_token(PLAN_BODY_DO);
      s = plan_branch(currentPlan, interpreter);
      jj_consume_token(PLAN_BODY_WHILE);
      jj_consume_token(88);
      a = action(currentPlan, interpreter);
      jj_consume_token(87);
      ct = new PlanDoConstruct(a, s);
      {if (true) return ct;}
      break;
    case PLAN_BODY_ATOMIC:
      jj_consume_token(PLAN_BODY_ATOMIC);
      s = plan_branch(currentPlan, interpreter);
      jj_consume_token(87);
      ct = new PlanAtomicConstruct(s);
      {if (true) return ct;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PlanConstruct wait_construct(Plan currentPlan, Interpreter interpreter) throws ParseException {
  PlanConstruct c = null;
  Action        a = null;
  Relation      rel = null;
    if (jj_2_1(2)) {
      jj_consume_token(PLAN_BODY_WAIT);
      jj_consume_token(88);
      a = action(currentPlan, interpreter);
      jj_consume_token(87);
      c = new PlanWaitConstruct(a);
      {if (true) return c;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLAN_BODY_WAIT:
        jj_consume_token(PLAN_BODY_WAIT);
        rel = relation(currentPlan, interpreter);
        jj_consume_token(87);
      c = new PlanWaitConstruct(rel);
      {if (true) return c;}
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/**********************************************************************/
/*								      */
/*	Condition						      */
/*								      */
/**********************************************************************/
  final public ConditionList condition_list(Plan currentPlan, Interpreter interpreter) throws ParseException {
  ConditionList cl = new ConditionList();
  Condition c;
    c = condition(currentPlan, interpreter);
      cl.append(c);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case FACT:
      case RETRIEVE:
      case INTEGER:
      case FLOAT:
      case CLASS_IDENTIFIER:
      case VARIABLE:
      case 91:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
      c = condition(currentPlan, interpreter);
      cl.append(c);
    }
      {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  final public Condition condition(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Expression e;
  Token id;
  ExpList el;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INTEGER:
    case FLOAT:
    case CLASS_IDENTIFIER:
    case VARIABLE:
    case 91:
      e = expression(currentPlan, interpreter);
      jj_consume_token(87);
      {if (true) return new ExpressionCondition(e);}
      break;
    case FACT:
      jj_consume_token(FACT);
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      jj_consume_token(87);
      {if (true) return new FactCondition(new Relation(id.image, el, interpreter), interpreter);}
      break;
    case RETRIEVE:
      jj_consume_token(RETRIEVE);
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      jj_consume_token(87);
      {if (true) return new RetrieveCondition(new Relation(id.image, el, interpreter), interpreter);}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**********************************************************************/
/*								      */
/*	Action							      */
/*								      */
/**********************************************************************/
  final public Action action(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Action a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXECUTE:
    case LOAD:
    case RETRIEVE:
    case RETRIEVEALL:
    case NEXTFACT:
    case TEST:
    case ASSERT:
    case RETRACT:
    case UPDATE:
      a = exec_action(currentPlan, interpreter);
      {if (true) return a;}
      break;
    case ASSIGN:
    case FACT:
    case POST:
    case UNPOST:
    case SUCCEED:
    case FAIL:
      a = misc_action(currentPlan, interpreter);
      {if (true) return a;}
      break;
    case ACHIEVE:
    case PERFORM:
    case MAINTAIN:
    case QUERY:
      a = goal_action(currentPlan, interpreter);
      {if (true) return a;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Action exec_action(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Token cm = null;
  Token fn = null;
  Token cls = null;
  Token id = null;
  Token id1 = null;
  Token id2 = null;

  Token v = null;

  Expression e = null;
  ExpList el = null;
  ExpList el1 = null;
  ExpList el2 = null;

  Action a;

  String s, t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXECUTE:
      // Object-oriented form of EXECUTE that invokes static functions
        // (i.e., doesn't require an object reference)
        cm = jj_consume_token(EXECUTE);
      if (jj_2_2(2)) {
        cls = jj_consume_token(CLASS_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          jj_consume_token(89);
          v = jj_consume_token(VARIABLE);
          jj_consume_token(90);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        el = explist(currentPlan, interpreter);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          fn = jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 89:
            jj_consume_token(89);
            v = jj_consume_token(VARIABLE);
            jj_consume_token(90);
            break;
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          el = explist(currentPlan, interpreter);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (cls != null || v != null) {

        // Break down the class identifier into the class path and the
        // function.
        String fullIdentifier;
        if (cls != null)
          fullIdentifier = new String(cls.image);
        else
          fullIdentifier = new String(fn.image);
//	System.out.println("fullIdentifier = " + fullIdentifier);
        int lastDotIndex = fullIdentifier.lastIndexOf(".");
//	System.out.println("lastDotIndex = " + lastDotIndex);
        String funcName = fullIdentifier.substring(lastDotIndex+1);
//	System.out.println("funcName = " + funcName);
        String className;
        if (lastDotIndex != -1)
          className = fullIdentifier.substring(0, lastDotIndex);
        else
          className = new String("");
//	System.out.println("className = " + className);
//	System.out.println("arg list = " + el + ", #args = " + el.getCount());

        if (v != null) {
          a = new ObjectAction(className, funcName,
                               new Variable(currentPlan.getSymbolTable(), v.image),
                               el);
          a.setTrace(_filename, getToken(0).beginLine);
          {if (true) return a;}
        }
        else {
          a = new ObjectAction(className, funcName, el);
          a.setTrace(_filename, getToken(0).beginLine);
          {if (true) return a;}
        }
      }
      else {
        a = new SimpleAction(fn.image, el, interpreter);
        a.setTrace(_filename, getToken(0).beginLine);
        {if (true) return a;}
      }
      break;
    case LOAD:
      cm = jj_consume_token(LOAD);
      el = explist(currentPlan, interpreter);
      a = new LoadAction(el, interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case RETRIEVE:
      cm = jj_consume_token(RETRIEVE);
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      a = new RetrieveAction(new Relation(id.image, el, interpreter), interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case RETRIEVEALL:
      cm = jj_consume_token(RETRIEVEALL);
      s = variable();
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      a = new RetrieveAllAction(new Variable(currentPlan.getSymbolTable(), s),
                                new Relation(id.image, el, interpreter),
                                interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case NEXTFACT:
      cm = jj_consume_token(NEXTFACT);
      s = variable();
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      a = new NextFactAction(new Variable(currentPlan.getSymbolTable(), s),
                             new Relation(id.image, el, interpreter),
                             interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case TEST:
      cm = jj_consume_token(TEST);
      e = expression(currentPlan, interpreter);
      a = new TestAction(e);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case ASSERT:
      cm = jj_consume_token(ASSERT);
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      a = new AssertAction(new Relation(id.image, el, interpreter), interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case RETRACT:
      cm = jj_consume_token(RETRACT);
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      a = new RetractAction(new Relation(id.image, el, interpreter), interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case UPDATE:
      cm = jj_consume_token(UPDATE);
      jj_consume_token(91);
      id1 = jj_consume_token(IDENTIFIER);
      el1 = explist(currentPlan, interpreter);
      jj_consume_token(92);
      jj_consume_token(91);
      id2 = jj_consume_token(IDENTIFIER);
      el2 = explist(currentPlan, interpreter);
      jj_consume_token(92);
      a = new UpdateAction(new Relation(id1.image, el1, interpreter),
                           new Relation(id2.image, el2, interpreter),
                           interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Action misc_action(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Token cm;
  Token id;
  Expression e;
  Expression v;
  ExpList el;
  GoalAction ga;

  Action a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      cm = jj_consume_token(ASSIGN);
      v = expression(currentPlan, interpreter);
      e = expression(currentPlan, interpreter);
      a = new AssignAction(v, e);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case FACT:
      cm = jj_consume_token(FACT);
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      a = new FactAction(new Relation(id.image, el, interpreter), interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case SUCCEED:
      cm = jj_consume_token(SUCCEED);
      a = new SucceedAction();
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case FAIL:
      cm = jj_consume_token(FAIL);
      a = new FailAction();
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case POST:
      cm = jj_consume_token(POST);
      ga = goal_action(currentPlan, interpreter);
      a = new PostAction(ga, interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    case UNPOST:
      cm = jj_consume_token(UNPOST);
      ga = goal_action(currentPlan, interpreter);
      a = new UnpostAction(ga, interpreter);
      a.setTrace(_filename, getToken(0).beginLine);
      {if (true) return a;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public GoalAction goal_action(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Token kw;
  GoalAction gab;
  Expression e_utility;
  ExpList e_by;
  ExpList e_not_by;
    if (jj_2_3(3)) {
      gab = goal_action_basic(currentPlan, interpreter);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_UTILITY:
        kw = jj_consume_token(KEYWORD_UTILITY);
        e_utility = expression(currentPlan, interpreter);
       gab.setUtility(e_utility);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_BY:
        kw = jj_consume_token(KEYWORD_BY);
        e_by = explist(currentPlan, interpreter);
       gab.setBy(e_by);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_NOT_BY:
        kw = jj_consume_token(KEYWORD_NOT_BY);
        e_not_by = explist(currentPlan, interpreter);
       gab.setNotBy(e_not_by);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    {if (true) return gab;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACHIEVE:
      case PERFORM:
      case MAINTAIN:
      case QUERY:
        gab = goal_action_basic(currentPlan, interpreter);
    {if (true) return gab;}
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public GoalAction goal_action_basic(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Token cm;
  Relation rel;
  GoalAction a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACHIEVE:
      cm = jj_consume_token(ACHIEVE);
      rel = relation(currentPlan, interpreter);
      a = new AchieveGoalAction(rel.getName(), rel, (Expression) null,
                                (ExpList) null, (ExpList) null,
                                interpreter);
      {if (true) return a;}
      break;
    case PERFORM:
      cm = jj_consume_token(PERFORM);
      rel = relation(currentPlan, interpreter);
      a = new PerformGoalAction(rel.getName(), rel, (Expression) null,
                                (ExpList) null, (ExpList) null,
                                interpreter);
      {if (true) return a;}
      break;
    case MAINTAIN:
      cm = jj_consume_token(MAINTAIN);
      rel = relation(currentPlan, interpreter);
      a = new MaintainGoalAction(rel.getName(), rel, (Expression) null,
                                interpreter);
      {if (true) return a;}
      break;
    case QUERY:
      cm = jj_consume_token(QUERY);
      rel = relation(currentPlan, interpreter);
      a = new QueryGoalAction(rel.getName(), rel, (Expression) null,
                                interpreter);
      {if (true) return a;}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**********************************************************************/
/*								      */
/*	Relation						      */
/*								      */
/**********************************************************************/
  final public Relation relation(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Token id;
  ExpList el;
    id = jj_consume_token(IDENTIFIER);
    el = explist(currentPlan, interpreter);
      {if (true) return new Relation(id.image, el, interpreter);}
    throw new Error("Missing return statement in function");
  }

/**********************************************************************/
/*								      */
/*	Expression						      */
/*								      */
/**********************************************************************/
  final public Expression expression(Plan currentPlan, Interpreter interpreter) throws ParseException {
  String s;
  Predicate p;
  SymbolTable st;
  FunctionCall fc;
  Value val;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INTEGER:
    case FLOAT:
    case CLASS_IDENTIFIER:
      val = value();
                {if (true) return val;}
      break;
    case VARIABLE:
      s = variable();
    {if (true) return new Variable(currentPlan.getSymbolTable(), s);}
      break;
    default:
      jj_la1[40] = jj_gen;
      if (jj_2_4(2)) {
        fc = funcall(currentPlan, interpreter);
      {if (true) return fc;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          p = predicate(currentPlan, interpreter);
      {if (true) return p;}
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpList explist(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Expression e;
  ExpList el = new ExpList();
    if (jj_2_6(2)) {
      e = expression(currentPlan, interpreter);
      el.append(e);
      label_14:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_14;
        }
        e = expression(currentPlan, interpreter);
        el.append(e);
      }
    } else {
      ;
    }
    {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  final public Value value() throws ParseException {
  Token val = null;
  Token var = null;
  Token cls = null;
    if (jj_2_7(4)) {
      val = jj_consume_token(INTEGER);
      {if (true) return new Value(Integer.valueOf(val.image).intValue());}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        val = jj_consume_token(FLOAT);
      {if (true) return new Value(Double.valueOf(val.image).doubleValue());}
        break;
      case STRING:
        val = jj_consume_token(STRING);
      {if (true) return new Value(val.image);}
        break;
      case CLASS_IDENTIFIER:
        cls = jj_consume_token(CLASS_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          jj_consume_token(89);
          var = jj_consume_token(VARIABLE);
          jj_consume_token(90);
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
      if (cls != null) {
        String  fullIdentifier;
        int     lastDotIndex;
        String  memberName;
        String  className;
        Class   c = null;
        Field   f = null;
        Object  o = null;
        Object  memVal = null;
        int     m;

        fullIdentifier = new String(cls.image);
        lastDotIndex = fullIdentifier.lastIndexOf(".");
        memberName = fullIdentifier.substring(lastDotIndex+1);

        //System.out.println("fullIdentifier = " + fullIdentifier);
        //System.out.println("lastDotIndex = " + lastDotIndex);
        //System.out.println("memberName = " + memberName);


        if (lastDotIndex != -1)
          className = fullIdentifier.substring(0, lastDotIndex);
        else
          className = new String("");

        //System.out.println("className = " + className);

        try {
          c = Class.forName(className);
          //System.out.println("c = " + c);
        }
        catch (Exception e) {
          System.out.println("Encountered exception " + e +
                             " trying to get class " + c);
          e.printStackTrace();
        }

        try {
          f = c.getDeclaredField(memberName);
          //System.out.println("f = " + f);
        }
        catch (Exception e) {
          System.out.println("Encountered exception " + e +
                             " trying to get field " + memberName);
          e.printStackTrace();
        }

        // ckeck modifiers to see if member is static
        // if static, then don't create an object instance
        m = f.getModifiers();
        if (var == null || Modifier.isStatic(m)) {
          //System.out.println("Member is static!\n");
          try {
            memVal = f.get(o);
            //System.out.println("memVal = " + memVal);
            {if (true) return new Value(memVal);}
          }
          catch (Exception e) {
            System.out.println("Encountered exception " + e +
                               " trying to create a new object");
            e.printStackTrace();
          }
        }
        else {
          //System.out.println("Member is not static!\n");
          try {
            o = c.newInstance();
            //System.out.println("o = " + o);
            memVal = f.get(o);
            //System.out.println("memVal = " + memVal);
            {if (true) return new Value(memVal);}
          }
          catch (Exception e) {
            System.out.println("Encountered exception " + e +
                               " trying to create a new object");
            e.printStackTrace();
          }
        }

        System.out.println("ERROR, ERROR, ERROR\n");
        {if (true) return new Value("hi");}
      }
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String variable() throws ParseException {
  Token v;
    v = jj_consume_token(VARIABLE);
      {if (true) return v.image;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionCall funcall(Plan currentPlan, Interpreter interpreter) throws ParseException {
  ExpList el = null;
  Token v = null;
  Token cls = null;
  Token fn = null;
  String className;
    jj_consume_token(91);
    if (jj_2_8(2)) {
      fn = jj_consume_token(SPECIAL_FUNCTION_NAME);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS_IDENTIFIER:
        cls = jj_consume_token(CLASS_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          jj_consume_token(89);
          v = jj_consume_token(VARIABLE);
          jj_consume_token(90);
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        break;
      case IDENTIFIER:
        fn = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS_IDENTIFIER:
          cls = jj_consume_token(CLASS_IDENTIFIER);
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    el = explist(currentPlan, interpreter);
    jj_consume_token(92);
    //System.out.println("Expression list is " + el.getCount() +
    //		       " elements long.");

    if (cls != null || v != null) {
      // Break down the class identifier into the class path and the
      // function.
      String fullIdentifier;
      int lastDotIndex;
      String funcName;

      if (cls != null && fn == null)
        fullIdentifier = new String(cls.image);
      else
        fullIdentifier = new String(fn.image);

      //System.out.println("fullIdentifier = " + fullIdentifier);
      lastDotIndex = fullIdentifier.lastIndexOf(".");
      //System.out.println("lastDotIndex = " + lastDotIndex);

      if (fn != null)
        funcName = fn.image;
      else
        funcName = fullIdentifier.substring(lastDotIndex+1);

      //System.out.println("funcName = " + funcName);

      if (lastDotIndex != -1)
        className = fullIdentifier.substring(0, lastDotIndex);
      else if (fn != null && cls != null) {
        className = new String("");
        el.insert(new Value(cls.image));
      }
      else
        className = new String("");

      //System.out.println("className = " + className);
      //System.out.println("arg list = " + el + ", #args = " + el.getCount());

      if (v != null) {
        //System.out.println("Creating object-instance method function call\n");
        {if (true) return new FunctionCall(className, funcName,
                                new Variable(currentPlan.getSymbolTable(), v.image),
                                el, interpreter);}
      }
      else {
        //System.out.println("Creating static method function call\n");
        {if (true) return new FunctionCall(className, funcName, el, interpreter);}
      }
    }
    else {
      //System.out.println("Creating basic function call for " + fn.image + "\n");
      {if (true) return new FunctionCall(fn.image, el, interpreter);}
    }
    System.out.println("Creating null function call\n");
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Predicate predicate(Plan currentPlan, Interpreter interpreter) throws ParseException {
  Token kw;
  Token id;
  ExpList el;
  Relation r;
    if (jj_2_9(2)) {
      jj_consume_token(91);
      kw = jj_consume_token(FACT);
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      jj_consume_token(92);
      r = new Relation(id.image, el, interpreter);
      {if (true) return new PredicateFact(id.image, r, interpreter);}
    } else if (jj_2_10(2)) {
      jj_consume_token(91);
      kw = jj_consume_token(RETRIEVE);
      id = jj_consume_token(IDENTIFIER);
      el = explist(currentPlan, interpreter);
      jj_consume_token(92);
      r = new Relation(id.image, el, interpreter);
      {if (true) return new PredicateRetrieve(id.image, r, interpreter);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        kw = jj_consume_token(ACHIEVE);
        id = jj_consume_token(IDENTIFIER);
        el = explist(currentPlan, interpreter);
        jj_consume_token(92);
      r = new Relation(id.image, el, interpreter);
      {if (true) return new PredicateAchieve(id.image, r, interpreter);}
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  String getMatchedText(Token start, Token end) throws ParseException {
    String matched = "";

    // special case for empty production
    // end.next == start  means that nothing consumed.
    if (end.next != start) {

      for(; start != end; start = start.next)
        matched += getSpecialTokenText(start)+start.image;

      matched += getSpecialTokenText(end)+end.image;
    }

    return matched;
  }

  String getSpecialTokenText(Token t) throws ParseException {
    // Suppose you wish to print all special tokens prior to
    // the regular token "t" (but only those that are after
    // the regular token before "t"):

    Token st = t.specialToken;

    // determines that there are no special tokens
    // and returns control to the caller.
    if (st == null) return "";

    // walks back the special token chain until it reaches the first
    // special token after the previous regular token.
    while (st.specialToken != null)
      st = st.specialToken;

    String specialTokenText = "";

    // now walks the special token chain in the forward
    // direction printing them in the process.  
    for ( ; st != null; st = st.next)
      specialTokenText += st.image;

    return specialTokenText;
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_10();
    jj_save(9, xla);
    return retval;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(STRING)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(FLOAT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(QUERY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_32()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(MAINTAIN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_32()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(PERFORM)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_32()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(ACHIEVE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_32()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(89)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(KEYWORD_NOT_BY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(CLASS_IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_16()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_35()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(KEYWORD_BY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(CLASS_IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(KEYWORD_UTILITY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_34()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_33()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(SPECIAL_FUNCTION_NAME)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(91)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(91)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(ACHIEVE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(89)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(PLAN_BODY_WAIT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(88)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(91)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RETRIEVE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(91)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(FACT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_16()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(CLASS_IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public JAMParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[48];
  final private int[] jj_la1_0 = {0x0,0x0,0x0,0x0,0x78000000,0x78000000,0x80000000,0x80000000,0x400,0x400,0x400,0x0,0x0,0x400,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_1 = {0x0,0x80000000,0x0,0x0,0x0,0x0,0x3ff,0x3ff,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0xd80ffc00,0xd80ffc00,0xd80ffc00,0xd80ffc00,0x0,0x0,0x0,0x0,0x0,0xd80ffc00,0x80000,0x80000000,0x80000000,0xd8000000,0x0,0x0,0x0,0x18000000,0xc0000000,0x1000000,0x2000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_2 = {0x3c0,0x0,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c0,0x20000,0x80d8001,0x80d8001,0x80d8000,0x7fff,0x7fff,0x7fff,0x7fff,0x200000,0x200000,0x200000,0x200000,0x200000,0x7fff,0x0,0x80d8001,0x80d8001,0x7fff,0x2000000,0x2000000,0x20000,0x640f,0x1830,0x0,0x0,0x0,0x3c0,0x3c0,0xd8000,0x8000000,0x2000000,0x50000,0x2000000,0x40000,0x60000,0x8000000,};
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JAMParser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new JAMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JAMParser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new JAMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JAMParser(JAMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JAMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[93];
    for (int i = 0; i < 93; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 48; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 93; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
