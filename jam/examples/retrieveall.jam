//  -*- Mode: Java -*-
//////////////////////////////////////////////////////////////////////////////
//  
//  $Id$
//  $Source$
//  
//  File              : retrieveall.jam
//  Author(s)         : marcush <marcush@irs.home.com>
//  
//  Description       : Test actions for retrieval of, and iteration through,
//                      multiple beliefs
//  
//  Organization      : Intelligent Reasoning Systems
//  Created On        : Thu Jul  1 06:44:59 1999
//  Last Modified By  : <marcush@marcush.net>
//  Last Modified On  : Sun Oct 28 14:58:43 2001
//  Update Count      : 47
//  
//////////////////////////////////////////////////////////////////////////////
//
//  JAM agent architecture
//
//  Copyright (C) 1998-2001 Marcus J. Huber and Intelligent Reasoning Systems
//  
//  Permission is granted to copy and redistribute this software so long
//  as no fee is charged, and so long as the copyright notice above, this
//  grant of permission, and the disclaimer below appear in all copies
//  made.  JAM may not be bundled, or sold alone or as part of another
//  product, without permission.
//  
//  This software is provided as is, without representation as to its
//  fitness for any purpose, and without warranty of any kind, either
//  express or implied, including without limitation the implied
//  warranties of merchantability and fitness for a particular purpose.
//  Marcus J. Huber and Intelligent Reasoning Systems shall not be
//  liable for any damages, including special, indirect, incidental, or
//  consequential damages, with respect to any claim arising out of or
//  in connection with the use of the software, even if they have been
//  or are hereafter advised of the possibility of such damages.
// 
//////////////////////////////////////////////////////////////////////////////

GOALS:
    PERFORM retrieveall_tested;

FACTS:

// Block5 on Block4 on Block3 initially so need to clear Block3 before stacking

    FACT ON "Block5" "Block4";
    FACT ON "Block4" "Block3";
    FACT ON "Block1" "Block2";
    FACT ON "Block2" "Table";
    FACT ON "Block3" "Table";
    FACT CLEAR "Block1";
    FACT CLEAR "Block5";
    FACT CLEAR "Table";
    FACT initialized "False";

Plan: {
NAME: "Top-level plan"
DOCUMENTATION:
    "Test RETRIEVEALL and NEXTFACT actions"
GOAL:
    PERFORM retrieveall_tested;
CONTEXT:
BODY:

    OR {
    	EXECUTE println "\n\nStarting plan.\n";
    	RETRIEVEALL $FACTS CLEAR $BLOCKA;
    	EXECUTE println "$FACTS was " $FACTS;

    	EXECUTE println "$BLOCKA was " $BLOCKA;
    	EXECUTE println "Getting next binding.\n";
    	NEXTFACT $FACTS CLEAR $BLOCKA;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	NEXTFACT $FACTS CLEAR $BLOCKA;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	NEXTFACT $FACTS CLEAR $BLOCKA;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;

    	NEXTFACT $FACTS CLEAR $BLOCKA;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    }
    {
	EXECUTE println "An action failed in the first OR!";
	EXECUTE println "The final variable binding was:";
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    };
    
    OR {
    	RETRIEVEALL $FACTS ON $BLOCKA $BLOCKB;
    	EXECUTE println "\n$FACTS is " $FACTS;
    	NEXTFACT $FACTS ON $BLOCKA $BLOCKB;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	EXECUTE println "$BLOCKB is now " $BLOCKB;
    	NEXTFACT $FACTS ON $BLOCKA $BLOCKB;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	EXECUTE println "$BLOCKB is now " $BLOCKB;
    	NEXTFACT $FACTS ON $BLOCKA $BLOCKB;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	EXECUTE println "$BLOCKB is now " $BLOCKB;
    	NEXTFACT $FACTS ON $BLOCKA $BLOCKB;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	EXECUTE println "$BLOCKB is now " $BLOCKB;
    	NEXTFACT $FACTS ON $BLOCKA $BLOCKB;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	EXECUTE println "$BLOCKB is now " $BLOCKB;

    	NEXTFACT $FACTS ON $BLOCKA $BLOCKB;
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	EXECUTE println "$BLOCKB is now " $BLOCKB;
    }
    {
	EXECUTE println "An action failed in the second OR!";
	EXECUTE println "The final variable bindings were:";
    	EXECUTE println "$BLOCKA is now " $BLOCKA;
    	EXECUTE println "$BLOCKB is now " $BLOCKB;
    };

    RETRIEVEALL $ONFACTS ON $BLOCKA $BLOCKB;
    RETRIEVEALL $CLEARFACTS CLEAR $BLOCKC;

    NEXTFACT $CLEARFACTS CLEAR $BLOCKC;
    EXECUTE println $BLOCKC " is CLEAR";
    NEXTFACT $ONFACTS ON $BLOCKA $BLOCKB;
    EXECUTE println $BLOCKA " is on " $BLOCKB;

    NEXTFACT $CLEARFACTS CLEAR $BLOCKC;
    EXECUTE println $BLOCKC " is CLEAR";
    NEXTFACT $ONFACTS ON $BLOCKA $BLOCKB;
    EXECUTE println $BLOCKA " is on " $BLOCKB;

    NEXTFACT $CLEARFACTS CLEAR $BLOCKC;
    EXECUTE println $BLOCKC " is CLEAR";
    NEXTFACT $ONFACTS ON $BLOCKA $BLOCKB;
    EXECUTE println $BLOCKA " is on " $BLOCKB;

    RETRIEVEALL $ONFACTS ON $BLOCKA $BLOCKB;
    RETRIEVEALL $CLEARFACTS CLEAR $BLOCKC;
    NEXTFACT $CLEARFACTS CLEAR $BLOCKC;
    EXECUTE println $BLOCKC " is CLEAR";
    NEXTFACT $CLEARFACTS CLEAR $BLOCKC;
    EXECUTE println $BLOCKC " is CLEAR";
    NEXTFACT $ONFACTS ON $BLOCKA $BLOCKC;
    EXECUTE println $BLOCKA " is on " $BLOCKC;

FAILURE:
    EXECUTE println "Plan failed!";
}

