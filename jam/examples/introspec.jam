//  -*- Mode: Java -*-
//////////////////////////////////////////////////////////////////////////////
//  
//  $Id$
//  $Source$
//  
//  File              : exG.jam
//  Author(s)         : marcush <marcush@irs.home.com>
//  
//  Description       : Test introspection actions
//  
//  Organization      : Intelligent Reasoning Systems
//  Created On        : Thu Jul  1 06:45:16 1999
//  Last Modified By  : <marcush@marcush.net>
//  Last Modified On  : Sun Oct 28 14:58:44 2001
//  Update Count      : 7
//  
//////////////////////////////////////////////////////////////////////////////
//
//  JAM agent architecture
//
//  Copyright (C) 1997-2001 Marcus J. Huber and Intelligent Reasoning Systems
//  
//  Permission is granted to copy and redistribute this software so long
//  as no fee is charged, and so long as the copyright notice above, this
//  grant of permission, and the disclaimer below appear in all copies
//  made.  JAM may not be bundled, or sold alone or as part of another
//  product, without permission.
//  
//  This software is provided as is, without representation as to its
//  fitness for any purpose, and without warranty of any kind, either
//  express or implied, including without limitation the implied
//  warranties of merchantability and fitness for a particular purpose.
//  Marcus J. Huber and Intelligent Reasoning Systems shall not be
//  liable for any damages, including special, indirect, incidental, or
//  consequential damages, with respect to any claim arising out of or
//  in connection with the use of the software, even if they have been
//  or are hereafter advised of the possibility of such damages.
// 
//////////////////////////////////////////////////////////////////////////////

GOALS:
    ACHIEVE JAM_test_done;

FACTS:
    FACT wm_test "true";

Plan: {
NAME:
    "Test special JAM introspection primitives"
GOAL:
    ACHIEVE JAM_test_done;
BODY:
    //EXECUTE setShowAPL 1;
    EXECUTE println "Starting toplevel goal";

    OR {
        EXECUTE com.irs.jam.primitives.pIsToplevelGoalp.execute;
    }
    {
	TEST (== 1 1);
    };

    ASSIGN $toplevel (com.irs.jam.primitives.pIsToplevelGoalp.execute "Test introspection primitives");
    EXECUTE print "Test introspection primitives ";
    OR {
       TEST (== $toplevel 0);
       EXECUTE println "**IS NOT** a toplevel goal.";
    }
    {
       TEST (== $toplevel 1);
       EXECUTE println "**IS** a toplevel goal.";
    };

    EXECUTE println "Just before subgoaling";
    ACHIEVE subgoal "hello";
    EXECUTE println "Starting toplevel goal";

    EXECUTE println "Test introspection primitives is "
            (com.irs.jam.primitives.pIsToplevelGoalp.execute "Test introspection primitives");

    EXECUTE println "1: $testVar is: " (com.irs.jam.primitives.pIsVariableInitializedp.execute $testVar);

    ASSIGN $testVar "hello";
    EXECUTE println "2: $testVar is: " (com.irs.jam.primitives.pIsVariableInitializedp.execute $testVar);

FAILURE:
    EXECUTE println "Toplevel plan failed.";
}

Plan: {
NAME:
    "subgoal"
GOAL:
    ACHIEVE subgoal $str;
BODY:
    EXECUTE println "Starting subgoal";
    ASSIGN $toplevel (com.irs.jam.primitives.pIsToplevelGoalp.execute "subgoal");
    EXECUTE print "The subgoal ";
    OR {
       TEST (== $toplevel 0);
       EXECUTE println "**IS NOT** a toplevel goal.";
    }
    {
       TEST (== $toplevel 1);
       EXECUTE println "**IS** a toplevel goal.";
    };

    EXECUTE println "1: $testVar is: " (com.irs.jam.primitives.pIsVariableInitializedp.execute $testVar);

    ASSIGN $testVar "hello";
    EXECUTE println "2: $testVar is: " (com.irs.jam.primitives.pIsVariableInitializedp.execute $testVar);

FAILURE:
    EXECUTE println "sublevel plan failed.";
}
