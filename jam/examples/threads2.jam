//  -*- Mode: Java -*-
//////////////////////////////////////////////////////////////////////////////
//  
//  $Id$
//  $Source$
//  
//  File              : exG.jam
//  Author(s)         : marcush <marcush@irs.home.com>
//  
//  Description       : Test PARALLEL action
//  
//  Organization      : Intelligent Reasoning Systems
//  Created On        : Thu Jul  1 06:45:16 1999
//  Last Modified By  : <marcush@marcush.net>
//  Last Modified On  : Sun Oct 28 14:58:42 2001
//  Update Count      : 5
//  
//////////////////////////////////////////////////////////////////////////////
//
//  JAM agent architecture
//
//  Copyright (C) 1997-2001 Marcus J. Huber and Intelligent Reasoning Systems
//  
//  Permission is granted to copy and redistribute this software so long
//  as no fee is charged, and so long as the copyright notice above, this
//  grant of permission, and the disclaimer below appear in all copies
//  made.  JAM may not be bundled, or sold alone or as part of another
//  product, without permission.
//  
//  This software is provided as is, without representation as to its
//  fitness for any purpose, and without warranty of any kind, either
//  express or implied, including without limitation the implied
//  warranties of merchantability and fitness for a particular purpose.
//  Marcus J. Huber and Intelligent Reasoning Systems shall not be
//  liable for any damages, including special, indirect, incidental, or
//  consequential damages, with respect to any claim arising out of or
//  in connection with the use of the software, even if they have been
//  or are hereafter advised of the possibility of such damages.
// 
//////////////////////////////////////////////////////////////////////////////

GOALS:
    ACHIEVE parallel_test_done 3.0 :UTILITY (+ 1.1 2.2);

FACTS:
    FACT test_done "False";
    FACT test_entry 1.0;
    FACT value 33;
    FACT initialized "False";

OBSERVER:
{
    RETRIEVE initialized $VALUE;
    WHEN : TEST (== $VALUE "False") {
/*
        EXECUTE setShowAPL 1;
        EXECUTE setShowGoalList 1;
	EXECUTE setShowWorldModel 1;
	EXECUTE setShowIntentionStructure 1;
*/
	UPDATE (initialized) (initialized "True");
    };
}


Plan: {
NAME:
    "Test Jam PARALLEL construct"
GOAL:
    ACHIEVE parallel_test_done $VALUE;
CONTEXT:
UTILITY: (+ 100 3.0 1.4);
BODY:
//    EXECUTE setShowWorldModel 1;
//    EXECUTE setShowIntentionStructure 1;
//    EXECUTE setShowGoalList 1;
//    EXECUTE setShowAPL 1;

    EXECUTE print "Line A.\n\n";

    PARALLEL
    {
        EXECUTE print "\nThread 1 #1.\n";
        EXECUTE print "\nThread 1 #2.\n";
        EXECUTE print "\nThread 1 #3.\n";
        EXECUTE print "\nThread 1 #4.\n";
        EXECUTE print "\nThread 1 #5.\n";
        EXECUTE print "\nThread 1 #6.\n";
        EXECUTE print "\nThread 1 #7.\n";
        EXECUTE print "\nThread 1 #8.\n";
        EXECUTE print "\nThread 1 #9.\n";
        EXECUTE print "\nThread 1 #10.\n";
        EXECUTE print "\nThread 1 #11.\n";
        EXECUTE print "\nThread 1 #12.\n";
        EXECUTE print "\nThread 1 #13.\n";
        EXECUTE print "\nThread 1 #14.\n";
        EXECUTE print "\nThread 1 #15.\n";
        EXECUTE print "\nThread 1 #16.\n";
        EXECUTE print "\nThread 1 #17.\n";
        EXECUTE print "\nThread 1 #18.\n";
        EXECUTE print "\nThread 1 #19.\n";
        EXECUTE print "\nThread 1 #20.\n";
    }			 
    {			 
        EXECUTE print "\nThread 2 #1.\n";
        EXECUTE print "\nThread 2 #2.\n";
        EXECUTE print "\nThread 2 #3.\n";
        EXECUTE print "\nThread 2 #4.\n";
        EXECUTE print "\nThread 2 #5.\n";
        EXECUTE print "\nThread 2 #6.\n";
        EXECUTE print "\nThread 2 #7.\n";
        EXECUTE print "\nThread 2 #8.\n";
        EXECUTE print "\nThread 2 #9.\n";
        EXECUTE print "\nThread 2 #10.\n";
        EXECUTE print "\nThread 2 #11.\n";
        EXECUTE print "\nThread 2 #12.\n";
        EXECUTE print "\nThread 2 #13.\n";
        EXECUTE print "\nThread 2 #14.\n";
        EXECUTE print "\nThread 2 #15.\n";
        EXECUTE print "\nThread 2 #16.\n";
        EXECUTE print "\nThread 2 #17.\n";
        EXECUTE print "\nThread 2 #18.\n";
        EXECUTE print "\nThread 2 #19.\n";
        EXECUTE print "\nThread 2 #20.\n";
    }			 
    {			 
        EXECUTE print "\nThread 3 #1.\n";
        EXECUTE print "\nThread 3 #2.\n";
        EXECUTE print "\nThread 3 #3.\n";
        EXECUTE print "\nThread 3 #4.\n";
        EXECUTE print "\nThread 3 #5.\n";
        EXECUTE print "\nThread 3 #6.\n";
        EXECUTE print "\nThread 3 #7.\n";
        EXECUTE print "\nThread 3 #8.\n";
        EXECUTE print "\nThread 3 #9.\n";
        EXECUTE print "\nThread 3 #10.\n";
        EXECUTE print "\nThread 3 #11.\n";
        EXECUTE print "\nThread 3 #12.\n";
        EXECUTE print "\nThread 3 #13.\n";
        EXECUTE print "\nThread 3 #14.\n";
        EXECUTE print "\nThread 3 #15.\n";
        EXECUTE print "\nThread 3 #16.\n";
        EXECUTE print "\nThread 3 #17.\n";
        EXECUTE print "\nThread 3 #18.\n";
        EXECUTE print "\nThread 3 #19.\n";
        EXECUTE print "\nThread 3 #20.\n";
    };

    EXECUTE print "Line B.\n\n";

    PARALLEL
    {
	EXECUTE print "Line C1.\n\n";
	EXECUTE print "Line C2.\n\n";
	EXECUTE print "Line C3.\n\n";
	EXECUTE print "Line C4.\n\n";
	EXECUTE print "Line C5.\n\n";
	EXECUTE print "Line C6.\n\n";
	EXECUTE print "Line C7.\n\n";
	EXECUTE print "Line C8.\n\n";
        ACHIEVE subgoal1;
    }
    {
        ACHIEVE subgoal2;
	EXECUTE print "Line D1.\n\n";
	EXECUTE print "Line D2.\n\n";
	EXECUTE print "Line D3.\n\n";
	EXECUTE print "Line D4.\n\n";
    };

    EXECUTE print "Line E.\n\n";
}

Plan: {
NAME:
    "Simple subgoal 1"
GOAL:
    ACHIEVE subgoal1;
CONTEXT:
BODY:
    EXECUTE print "Subgoal1 line 1.\n";
    EXECUTE print "Subgoal1 line 2.\n";
    EXECUTE print "Subgoal1 line 3.\n";
    EXECUTE print "Subgoal1 line 4.\n";
}

Plan: {
NAME:
    "Simple subgoal 2"
GOAL:
    ACHIEVE subgoal2;
CONTEXT:
BODY:
    EXECUTE print "Subgoal2 line 1.\n";
    EXECUTE print "Subgoal2 line 2.\n";
    EXECUTE print "Subgoal2 line 3.\n";
    EXECUTE print "Subgoal2 line 4.\n";
}


