//  -*- Mode: Java -*-
//////////////////////////////////////////////////////////////////////////////
//  
//  $Id$
//  $Source$
//  
//  File              : exE.jam
//  Author(s)         : marcush <marcush@irs.home.com>
//  
//  Description       : Test POST and UNPOST actions
//  
//  Organization      : Intelligent Reasoning Systems
//  Created On        : Thu Jul  1 06:45:24 1999
//  Last Modified By  : <marcush@marcush.net>
//  Last Modified On  : Sun Oct 28 14:58:43 2001
//  Update Count      : 33
//  
//////////////////////////////////////////////////////////////////////////////
//
//  JAM agent architecture
//
//  Copyright (C) 1997-2001 Marcus J. Huber and Intelligent Reasoning Systems
//  
//  Permission is granted to copy and redistribute this software so long
//  as no fee is charged, and so long as the copyright notice above, this
//  grant of permission, and the disclaimer below appear in all copies
//  made.  JAM may not be bundled, or sold alone or as part of another
//  product, without permission.
//  
//  This software is provided as is, without representation as to its
//  fitness for any purpose, and without warranty of any kind, either
//  express or implied, including without limitation the implied
//  warranties of merchantability and fitness for a particular purpose.
//  Marcus J. Huber and Intelligent Reasoning Systems shall not be
//  liable for any damages, including special, indirect, incidental, or
//  consequential damages, with respect to any claim arising out of or
//  in connection with the use of the software, even if they have been
//  or are hereafter advised of the possibility of such damages.
// 
//////////////////////////////////////////////////////////////////////////////

GOALS:
    ACHIEVE goal_test 1.1 "String1" 1;

FACTS:
    FACT test_done "False";
    FACT hello1 "False";
    FACT hello2 0;
    FACT hello3 "hey there";
    FACT hello4 1.1;
    FACT initialized "False";

OBSERVER:
{
    RETRIEVE initialized $VALUE;
    WHEN : TEST (== $VALUE "False") {
/*
        EXECUTE setShowAPL 1;
        EXECUTE setShowGoalList 1;
	EXECUTE setShowWorldModel 1;
	EXECUTE setShowIntentionStructure 1;
*/
	UPDATE (initialized) (initialized "True");
    };
}


Plan: {
NAME:
    "Test Argument Passing"
GOAL:
    ACHIEVE goal_test $FLOAT $TEXT $INT;
CONTEXT:
    FACT test_done $WM_ENTRY;
BODY:
    EXECUTE printWorldModel;
    ASSIGN $LOCAL_VALUE 0;
    EXECUTE print "\n\n$LOCAL_VALUE = " $LOCAL_VALUE "\n";
    POST ACHIEVE goal_test2 1.1 "String2" 6;
    POST ACHIEVE goal_test2 2.2 "String3" 6;
    POST ACHIEVE goal_test2 3.3 "String4" 6;
    POST ACHIEVE goal_test2 4.4 "String6" 6;
    EXECUTE print "$FLOAT = " $FLOAT "\n";
    EXECUTE print "$TEXT = " $TEXT "\n";
    //UNPOST ACHIEVE goal_test 2.2 "String2" 2;
    EXECUTE print "$INT = " $INT "\n";
    EXECUTE print "$WM_ENTRY = " $WM_ENTRY "\n";
    ACHIEVE subgoal $TEXT $INT $FLOAT;
    EXECUTE println "After subgoaling";
    EXECUTE printIntentionStructure;
}


Plan: {
NAME:
    "Test Argument Passing"
GOAL:
    ACHIEVE subgoal $TEXT $INT $FLOAT;
CONTEXT:
    FACT test_done $WM_ENTRY;
BODY:
    ASSIGN $LOCAL_VALUE 5;
    EXECUTE print "\n\nSubgoal $LOCAL_VALUE = " $LOCAL_VALUE "\n";
    EXECUTE print "Subgoal $FLOAT = " $FLOAT "\n";
    EXECUTE println "Before UNPOST";
    EXECUTE printIntentionStructure;
    UNPOST ACHIEVE goal_test2;
    EXECUTE println "After UNPOST";
    EXECUTE printIntentionStructure;
    EXECUTE println "$flt=" $flt;
    EXECUTE println "$string=" $string;
    EXECUTE println "$num=" $num;

    EXECUTE print "Subgoal $TEXT = " $TEXT "\n";
    EXECUTE print "Subgoal $INT = " $INT "\n";
    EXECUTE print "Subgoal $WM_ENTRY = " $WM_ENTRY "\n";

FAILURE:
    EXECUTE println "subgoal failed with arguments: " $INT ", "
            $TEXT ", " $FLOAT;
}
