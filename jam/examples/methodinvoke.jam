//  -*- Mode: Java -*-
//////////////////////////////////////////////////////////////////////////////
//  
//  $Id$
//  $Source$
//  
//  File              : ex-funcall.jam
//  Author(s)         : marcush <marcush@irs.home.com>
//  
//  Description       : Test JAM's capability to invoke Java-native class
//                      methods as expression functions.  Also tests JAM's
//                      capability to detect null Java object pointers from
//                      the plan level.
//  
//  Organization      : Intelligent Reasoning Systems
//  Created On        : Thu Jul  1 06:44:04 1999
//  Last Modified By  : <marcush@marcush.net>
//  Last Modified On  : Sun Oct 28 14:58:41 2001
//  Update Count      : 4
//  
//////////////////////////////////////////////////////////////////////////////
//
//  JAM agent architecture
//
//  Copyright (C) 1999-2001 Marcus J. Huber and Intelligent Reasoning Systems
//  
//  Permission is granted to copy and redistribute this software so long
//  as no fee is charged, and so long as the copyright notice above, this
//  grant of permission, and the disclaimer below appear in all copies
//  made.  JAM may not be bundled, or sold alone or as part of another
//  product, without permission.
//  
//  This software is provided as is, without representation as to its
//  fitness for any purpose, and without warranty of any kind, either
//  express or implied, including without limitation the implied
//  warranties of merchantability and fitness for a particular purpose.
//  Marcus J. Huber and Intelligent Reasoning Systems shall not be
//  liable for any damages, including special, indirect, incidental, or
//  consequential damages, with respect to any claim arising out of or
//  in connection with the use of the software, even if they have been
//  or are hereafter advised of the possibility of such damages.
// 
//////////////////////////////////////////////////////////////////////////////

GOALS:
    ACHIEVE printing_done "goal1";

FACTS:
    FACT initialized "False";
    FACT test_done "False";

OBSERVER:
{
    RETRIEVE initialized $VALUE;
/*
    WHEN : TEST (== $VALUE "False") {
        EXECUTE setShowAPL 1;
        EXECUTE setShowGoalList 1;
	EXECUTE setShowWorldModel 1;
	EXECUTE setShowIntentionStructure 1;
	UPDATE (initialized) (initialized "True");
    };
*/
}

Plan: {
NAME:
    "Test Argument Passing"
DOCUMENTATION:
    "Test Argument Passing"
GOAL:
    ACHIEVE printing_done $TEXT;
CONTEXT:
    FACT test_done "False";
BODY:

    ASSIGN $hostname (com.irs.jam.primitives.GetHostname2.execute);
    EXECUTE println "Hostname is " $hostname;

    EXECUTE createNewTestClassObject $testObject;
    EXECUTE print[$testObject];
    EXECUTE println;

    WHEN : TEST (== 0 $testObject) { EXECUTE println "1 test object was null."; };
    WHEN : TEST (== $testObject 0) { EXECUTE println "2 test object was null."; };
    WHEN : TEST (== 1 $testObject) { EXECUTE println "3 test object was not null."; };
    WHEN : TEST (== $testObject 1) { EXECUTE println "4 test object was not null."; };
    WHEN : TEST (!= 0 $testObject) { EXECUTE println "5 test object was not null."; };
    WHEN : TEST (!= $testObject 0) { EXECUTE println "6 test object was not null."; };
    WHEN : TEST (!= 1 $testObject) { EXECUTE println "7 test object was null."; };
    WHEN : TEST (!= $testObject 1) { EXECUTE println "8 test object was null."; };

    ASSIGN $objRef (com.irs.jam.examples.TestClass.memberFunction5 5 "a" "b");
    WHEN : TEST (== 0 $objRef) { EXECUTE println "1 test object was null."; };
    WHEN : TEST (== $objRef 0) { EXECUTE println "2 test object was null."; };
    WHEN : TEST (== 1 $objRef) { EXECUTE println "3 test object was not null."; };
    WHEN : TEST (== $objRef 1) { EXECUTE println "4 test object was not null."; };
    WHEN : TEST (!= 0 $objRef) { EXECUTE println "5 test object was not null."; };
    WHEN : TEST (!= $objRef 0) { EXECUTE println "6 test object was not null."; };
    WHEN : TEST (!= 1 $objRef) { EXECUTE println "7 test object was null."; };
    WHEN : TEST (!= $objRef 1) { EXECUTE println "8 test object was null."; };

    ASSIGN $val 5.0;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction5 "a" "b" $val);
    EXECUTE println "$val = " $val;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction5 "a" "b" $val);
    EXECUTE println "$val = " $val;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction5 "a" "b" $val);
    EXECUTE println "$val = " $val;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction5 "a" "b" $val);
    EXECUTE println "$val = " $val;

    ASSIGN $val "gggg";
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction2 2 5 $val);
    EXECUTE println "$val = " $val;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction2 2 5 $val);
    EXECUTE println "$val = " $val;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction2 2 5 $val);
    EXECUTE println "$val = " $val;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction2 2 5 $val);
    EXECUTE println "$val = " $val;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction2 2 5 $val);
    EXECUTE println "$val = " $val;
    ASSIGN $val (com.irs.jam.examples.TestClass.memberFunction2 2 5 $val);
    EXECUTE println "$val = " $val;

}


