GOALS:
	ACHIEVE vacuum_dust;

FACTS:
	FACT vacuum_position 0 0;
	FACT dust 3 0;
	FACT dust 6 0;
	FACT dust 2 1;
	FACT dust 4 2;
	FACT dust 0 3;
	FACT dust 3 3;
	FACT dust 1 2; 
	FACT dust 4 4; 
	FACT dust 1 5; 
	FACT dust 5 5; 
	FACT dust 3 6;
	FACT exit 7 6; 

PLAN:{
NAME:
	"Instruction to move vacuum cleaner one step on its direction"
GOAL:
	ACHIEVE move_robot $direction;
BODY:
	RETRIEVE vacuum_position $x $y;
	WHEN: TEST(== $direction "right"){
		UPDATE (vacuum_position) (vacuum_position (+ $x 1) $y);
	};
	WHEN: TEST(== $direction "left"){
		UPDATE (vacuum_position) (vacuum_position (- $x 1) $y);
	};
	WHEN: TEST(== $direction "up"){
		UPDATE (vacuum_position) (vacuum_position $x (+ $y 1));
	};
	WHEN: TEST(== $direction "down"){
		UPDATE (vacuum_position) (vacuum_position $x (- $y 1));
	};

	RETRIEVE vacuum_position $x $y;
	EXECUTE println "Current position: ("$x","$y")";
	PERFORM collect_dust;
FAILURE:
EXECUTE println "Failed to move...Please reboot.\n";
}

PLAN: {
NAME: "Start moving vacuum cleaner"
GOAL:
	ACHIEVE vacuum_dust;
BODY:
	RETRIEVE vacuum_position $x $y;
	EXECUTE println "Vacuum cleaner starting position : (" $x "," $y ")" ;
	DO{
		DO{
			PERFORM move_robot "right"; //call function
			EXECUTE println "moving to RIGHT.....";
			RETRIEVE vacuum_position $x $y;
		} WHILE: TEST (< $x 7);

		DO{
			WHEN: TEST (!= $y 6){
			PERFORM move_robot "left";
			EXECUTE println "moving to LEFT.....";
			RETRIEVE vacuum_position $x $y;
			};
		} WHILE: TEST (&& (> $x 0) (!= $y 6));

		WHEN: TEST (&& (||(== $x 0) (== $x 7)) (< $y 6)) {
			PERFORM move_robot "up";
			EXECUTE println "moving to UP.....";
			RETRIEVE vacuum_position $x $y;
		};

	} WHILE: TEST (!(&& (== $x 7) (== $y 6)));
		WHEN: TEST (&& (> $x 7)(> $y 6)){
			EXECUTE println "Exit and Standby";
		};
FAILURE:
	EXECUTE println "Failed to move...Please reboot\n";
}

PLAN:{
NAME:
	"Collect dust"
GOAL:
	ACHIEVE collect_dust;
BODY:
	RETRIEVE vacuum_position $x $y;
	//RETRIEVE dust1 $dx1 $dy1;
	//RETRIEVE dust2 $dx2 $dy2;
	//RETRIEVE dust3 $dx3 $dy3;
	//RETRIEVE dust4 $dx4 $dy4;
	//RETRIEVE dust5 $dx5 $dy5;
	//RETRIEVE dust6 $dx6 $dy6;
	//RETRIEVE dust7 $dx7 $dy7;
	//RETRIEVE dust8 $dx8 $dy8;
	//RETRIEVE dust9 $dx9 $dy9;
	//RETRIEVE dust10 $dx10 $dy10;
	//RETRIEVE exit $ex1 $ey1;
	RETRIEVEALL $FACTS dust $x $y;
	
	//WHEN: TEST(&&(== $x $dx1) (== $y $dy1)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
		EXECUTE println "\t\nDust is clean (" $x "," $y ")\n";


	//};
	//WHEN: TEST(&&(== $x $dx2) (== $y $dy2)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
	//};
	//WHEN: TEST(&&(== $x $dx3) (== $y $dy3)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
	//};
	//WHEN: TEST(&&(== $x $dx4) (== $y $dy4)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
	//};
	//WHEN: TEST(&&(== $x $dx5) (== $y $dy5)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
	//};
	//WHEN: TEST(&&(== $x $dx6) (== $y $dy6)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
	//};
	//WHEN: TEST(&&(== $x $dx7) (== $y $dy7)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
	//};
	//WHEN: TEST(&&(== $x $dx8) (== $y $dy8)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
	//	NEXTFACT $FACTS dust $x $y;
	};
	//WHEN: TEST(&&(== $x $dx9) (== $y $dy9)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
	//};
	//WHEN: TEST(&&(== $x $dx10) (== $y $dy10)){
		EXECUTE println "\t\nDust collected at (" $x "," $y ")\n";
		NEXTFACT $FACTS dust $x $y;
	//};
	//WHEN: TEST(&&(== $x $ex1) (== $y $ey1))
	//{
	//		EXECUTE println "Exiting...";
	//};
FAILURE:
EXECUTE print "Dust is not available at the position " $x "," $y;
}